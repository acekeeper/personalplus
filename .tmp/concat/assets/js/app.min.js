/**
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

/**
 * This is based, in part, on [fkadeveloper](https://github.com/fkadeveloper)'s
 * [lorem.js](https://github.com/fkadeveloper/loremjs).
 */
angular.module( 'ngPlaceholders', [] )

  .factory( 'PlaceholderTextService', function () {

    var words = ["lorem", "ipsum", "dolor", "sit", "amet,", "consectetur", "adipiscing",
      "elit", "ut", "aliquam,", "purus", "sit", "amet", "luctus", "venenatis,",
      "lectus", "magna", "fringilla", "urna,", "porttitor", "rhoncus", "dolor",
      "purus", "non", "enim", "praesent", "elementum", "facilisis", "leo,", "vel",
      "fringilla", "est", "ullamcorper", "eget", "nulla", "facilisi", "etiam",
      "dignissim", "diam", "quis", "enim", "lobortis", "scelerisque", "fermentum",
      "dui", "faucibus", "in", "ornare", "quam", "viverra", "orci", "sagittis", "eu",
      "volutpat", "odio", "facilisis", "mauris", "sit", "amet", "massa", "vitae",
      "tortor", "condimentum", "lacinia", "quis", "vel", "eros", "donec", "ac",
      "odio", "tempor", "orci", "dapibus", "ultrices", "in", "iaculis", "nunc",
      "sed", "augue", "lacus,", "viverra", "vitae", "congue", "eu,", "consequat",
      "ac", "felis", "donec", "et", "odio", "pellentesque", "diam", "volutpat",
      "commodo", "sed", "egestas", "egestas", "fringilla", "phasellus", "faucibus",
      "scelerisque", "eleifend", "donec", "pretium", "vulputate", "sapien", "nec",
      "sagittis", "aliquam", "malesuada", "bibendum", "arcu", "vitae", "elementum",
      "curabitur", "vitae", "nunc", "sed", "velit", "dignissim", "sodales", "ut",
      "eu", "sem", "integer", "vitae", "justo", "eget", "magna", "fermentum",
      "iaculis", "eu", "non", "diam", "phasellus", "vestibulum", "lorem", "sed",
      "risus", "ultricies", "tristique", "nulla", "aliquet", "enim", "tortor,", "at",
      "auctor", "urna", "nunc", "id", "cursus", "metus", "aliquam", "eleifend", "mi",
      "in", "nulla", "posuere", "sollicitudin", "aliquam", "ultrices", "sagittis",
      "orci,", "a", "scelerisque", "purus", "semper", "eget", "duis", "at", "tellus",
      "at", "urna", "condimentum", "mattis", "pellentesque", "id", "nibh", "tortor,",
      "id", "aliquet", "lectus", "proin", "nibh", "nisl,", "condimentum", "id",
      "venenatis", "a,", "condimentum", "vitae", "sapien", "pellentesque",
      "habitant", "morbi", "tristique", "senectus", "et", "netus", "et", "malesuada",
      "fames", "ac", "turpis", "egestas", "sed", "tempus,", "urna", "et", "pharetra",
      "pharetra,", "massa", "massa", "ultricies", "mi,", "quis", "hendrerit",
      "dolor", "magna", "eget", "est", "lorem", "ipsum", "dolor", "sit", "amet,",
      "consectetur", "adipiscing", "elit", "pellentesque", "habitant", "morbi",
      "tristique", "senectus", "et", "netus", "et", "malesuada", "fames", "ac",
      "turpis", "egestas", "integer", "eget", "aliquet", "nibh", "praesent",
      "tristique", "magna", "sit", "amet", "purus", "gravida", "quis", "blandit",
      "turpis", "cursus", "in", "hac", "habitasse", "platea", "dictumst", "quisque",
      "sagittis,", "purus", "sit", "amet", "volutpat", "consequat,", "mauris",
      "nunc", "congue", "nisi,", "vitae", "suscipit", "tellus", "mauris", "a",
      "diam", "maecenas", "sed", "enim", "ut", "sem", "viverra", "aliquet", "eget",
      "sit", "amet", "tellus", "cras", "adipiscing", "enim", "eu", "turpis",
      "egestas", "pretium", "aenean", "pharetra,", "magna", "ac", "placerat",
      "vestibulum,", "lectus", "mauris", "ultrices", "eros,", "in", "cursus",
      "turpis", "massa", "tincidunt", "dui", "ut", "ornare", "lectus", "sit", "amet",
      "est", "placerat", "in", "egestas", "erat", "imperdiet", "sed", "euismod",
      "nisi", "porta", "lorem", "mollis", "aliquam", "ut", "porttitor", "leo", "a",
      "diam", "sollicitudin", "tempor", "id", "eu", "nisl", "nunc", "mi", "ipsum,",
      "faucibus", "vitae", "aliquet", "nec,", "ullamcorper", "sit", "amet", "risus",
      "nullam", "eget", "felis", "eget", "nunc", "lobortis", "mattis", "aliquam",
      "faucibus", "purus", "in", "massa", "tempor", "nec", "feugiat", "nisl",
      "pretium", "fusce", "id", "velit", "ut", "tortor", "pretium", "viverra",
      "suspendisse", "potenti", "nullam", "ac", "tortor", "vitae", "purus",
      "faucibus", "ornare", "suspendisse", "sed", "nisi", "lacus,", "sed", "viverra",
      "tellus", "in", "hac", "habitasse", "platea", "dictumst", "vestibulum",
      "rhoncus", "est", "pellentesque", "elit", "ullamcorper", "dignissim", "cras",
      "tincidunt", "lobortis", "feugiat", "vivamus", "at", "augue", "eget", "arcu",
      "dictum", "varius", "duis", "at", "consectetur", "lorem", "donec", "massa",
      "sapien,", "faucibus", "et", "molestie", "ac,", "feugiat", "sed", "lectus",
      "vestibulum", "mattis", "ullamcorper", "velit", "sed", "ullamcorper", "morbi",
      "tincidunt", "ornare", "massa,", "eget", "egestas", "purus", "viverra",
      "accumsan", "in", "nisl", "nisi,", "scelerisque", "eu", "ultrices", "vitae,",
      "auctor", "eu", "augue", "ut", "lectus", "arcu,", "bibendum", "at", "varius",
      "vel,", "pharetra", "vel", "turpis", "nunc", "eget", "lorem", "dolor,", "sed",
      "viverra", "ipsum", "nunc", "aliquet", "bibendum", "enim,", "facilisis",
      "gravida", "neque", "convallis", "a", "cras", "semper", "auctor", "neque,",
      "vitae", "tempus", "quam", "pellentesque", "nec", "nam", "aliquam", "sem",
      "et", "tortor", "consequat", "id", "porta", "nibh", "venenatis", "cras", "sed",
      "felis", "eget", "velit", "aliquet", "sagittis", "id", "consectetur", "purus",
      "ut", "faucibus", "pulvinar", "elementum", "integer", "enim", "neque,",
      "volutpat", "ac", "tincidunt", "vitae,", "semper", "quis", "lectus", "nulla",
      "at", "volutpat", "diam", "ut", "venenatis", "tellus", "in", "metus",
      "vulputate", "eu", "scelerisque", "felis", "imperdiet", "proin", "fermentum",
      "leo", "vel", "orci", "porta", "non", "pulvinar", "neque", "laoreet",
      "suspendisse", "interdum", "consectetur", "libero,", "id", "faucibus", "nisl",
      "tincidunt", "eget", "nullam", "non", "nisi", "est,", "sit", "amet",
      "facilisis", "magna", "etiam", "tempor,", "orci", "eu", "lobortis",
      "elementum,", "nibh", "tellus", "molestie", "nunc,", "non", "blandit", "massa",
      "enim", "nec", "dui", "nunc", "mattis", "enim", "ut", "tellus", "elementum",
      "sagittis", "vitae", "et", "leo", "duis", "ut", "diam", "quam", "nulla",
      "porttitor", "massa", "id", "neque", "aliquam", "vestibulum", "morbi",
      "blandit", "cursus", "risus,", "at", "ultrices", "mi", "tempus", "imperdiet",
      "nulla", "malesuada", "pellentesque", "elit", "eget", "gravida", "cum",
      "sociis", "natoque", "penatibus", "et", "magnis", "dis", "parturient",
      "montes,", "nascetur", "ridiculus", "mus", "mauris", "vitae", "ultricies",
      "leo", "integer", "malesuada", "nunc", "vel", "risus", "commodo", "viverra",
      "maecenas", "accumsan,", "lacus", "vel", "facilisis", "volutpat,", "est",
      "velit", "egestas", "dui,", "id", "ornare", "arcu", "odio", "ut", "sem",
      "nulla", "pharetra", "diam", "sit", "amet", "nisl", "suscipit", "adipiscing",
      "bibendum", "est", "ultricies", "integer", "quis", "auctor", "elit", "sed",
      "vulputate", "mi", "sit", "amet", "mauris", "commodo", "quis", "imperdiet",
      "massa", "tincidunt", "nunc", "pulvinar", "sapien", "et", "ligula",
      "ullamcorper", "malesuada", "proin", "libero", "nunc,", "consequat",
      "interdum", "varius", "sit", "amet,", "mattis", "vulputate", "enim", "nulla",
      "aliquet", "porttitor", "lacus,", "luctus", "accumsan", "tortor", "posuere",
      "ac", "ut", "consequat", "semper", "viverra", "nam", "libero", "justo,",
      "laoreet", "sit", "amet", "cursus", "sit", "amet,", "dictum", "sit", "amet",
      "justo", "donec", "enim", "diam,", "vulputate", "ut", "pharetra", "sit",
      "amet,", "aliquam", "id", "diam", "maecenas", "ultricies", "mi", "eget",
      "mauris", "pharetra", "et", "ultrices", "neque", "ornare", "aenean", "euismod",
      "elementum", "nisi,", "quis", "eleifend", "quam", "adipiscing", "vitae",
      "proin", "sagittis,", "nisl", "rhoncus", "mattis", "rhoncus,", "urna", "neque",
      "viverra", "justo,", "nec", "ultrices", "dui", "sapien", "eget", "mi", "proin",
      "sed", "libero", "enim,", "sed", "faucibus", "turpis", "in", "eu", "mi",
      "bibendum", "neque", "egestas", "congue", "quisque", "egestas", "diam", "in",
      "arcu", "cursus", "euismod", "quis", "viverra", "nibh", "cras", "pulvinar",
      "mattis", "nunc,", "sed", "blandit", "libero", "volutpat", "sed", "cras",
      "ornare", "arcu", "dui", "vivamus", "arcu", "felis,", "bibendum", "ut",
      "tristique", "et,", "egestas", "quis", "ipsum", "suspendisse", "ultrices",
      "fusce", "ut", "placerat", "orci", "nulla", "pellentesque",
      "dignissim", "enim,", "sit", "amet", "venenatis", "urna", "cursus", "eget",
      "nunc", "scelerisque", "viverra", "mauris,", "in", "aliquam", "sem",
      "fringilla", "ut", "morbi", "tincidunt", "augue", "interdum", "velit",
      "euismod", "in", "pellentesque", "massa", "placerat", "duis", "ultricies",
      "lacus", "sed", "turpis", "tincidunt", "id", "aliquet", "risus", "feugiat",
      "in", "ante", "metus,", "dictum", "at", "tempor", "commodo,", "ullamcorper",
      "a", "lacus", "vestibulum", "sed", "arcu", "non", "odio", "euismod", "lacinia",
      "at", "quis", "risus", "sed", "vulputate", "odio", "ut", "enim", "blandit",
      "volutpat", "maecenas", "volutpat", "blandit", "aliquam", "etiam", "erat",
      "velit,", "scelerisque", "in", "dictum", "non,", "consectetur", "a", "erat",
      "nam", "at", "lectus", "urna", "duis", "convallis", "convallis", "tellus,",
      "id", "interdum", "velit", "laoreet", "id", "donec", "ultrices", "tincidunt",
      "arcu,", "non", "sodales", "neque", "sodales", "ut", "etiam", "sit", "amet",
      "nisl", "purus,", "in", "mollis", "nunc", "sed", "id", "semper", "risus", "in",
      "hendrerit", "gravida", "rutrum", "quisque", "non", "tellus", "orci,", "ac",
      "auctor", "augue", "mauris", "augue", "neque,", "gravida", "in", "fermentum",
      "et,", "sollicitudin", "ac", "orci", "phasellus", "egestas", "tellus",
      "rutrum", "tellus", "pellentesque", "eu", "tincidunt", "tortor", "aliquam",
      "nulla", "facilisi", "cras", "fermentum,", "odio", "eu", "feugiat", "pretium,",
      "nibh", "ipsum", "consequat", "nisl,", "vel", "pretium", "lectus", "quam",
      "id", "leo", "in", "vitae", "turpis", "massa", "sed", "elementum", "tempus",
      "egestas", "sed", "sed", "risus", "pretium", "quam", "vulputate", "dignissim",
      "suspendisse", "in", "est", "ante", "in", "nibh", "mauris,", "cursus",
      "mattis", "molestie", "a,", "iaculis", "at", "erat", "pellentesque",
      "adipiscing", "commodo", "elit,", "at", "imperdiet", "dui", "accumsan", "sit",
      "amet", "nulla", "facilisi", "morbi", "tempus", "iaculis", "urna,", "id",
      "volutpat", "lacus", "laoreet", "non", "curabitur", "gravida", "arcu", "ac",
      "tortor", "dignissim", "convallis", "aenean", "et", "tortor", "at", "risus",
      "viverra", "adipiscing", "at", "in", "tellus", "integer", "feugiat",
      "scelerisque", "varius", "morbi", "enim", "nunc,", "faucibus", "a",
      "pellentesque", "sit", "amet,", "porttitor", "eget", "dolor", "morbi", "non",
      "arcu", "risus,", "quis", "varius", "quam", "quisque", "id", "diam", "vel",
      "quam", "elementum", "pulvinar", "etiam", "non", "quam", "lacus",
      "suspendisse", "faucibus", "interdum", "posuere", "lorem", "ipsum", "dolor",
      "sit", "amet,", "consectetur", "adipiscing", "elit", "duis", "tristique",
      "sollicitudin", "nibh", "sit", "amet", "commodo", "nulla", "facilisi",
      "nullam", "vehicula", "ipsum", "a", "arcu", "cursus", "vitae", "congue",
      "mauris", "rhoncus", "aenean", "vel", "elit", "scelerisque", "mauris",
      "pellentesque", "pulvinar", "pellentesque", "habitant", "morbi", "tristique",
      "senectus", "et", "netus", "et", "malesuada", "fames", "ac", "turpis",
      "egestas", "maecenas", "pharetra", "convallis", "posuere", "morbi", "leo",
      "urna,", "molestie", "at", "elementum", "eu,", "facilisis", "sed", "odio",
      "morbi", "quis", "commodo", "odio", "aenean", "sed", "adipiscing", "diam",
      "donec", "adipiscing", "tristique", "risus", "nec", "feugiat", "in",
      "fermentum", "posuere", "urna", "nec", "tincidunt", "praesent", "semper",
      "feugiat", "nibh", "sed", "pulvinar", "proin", "gravida", "hendrerit",
      "lectus", "a", "molestie", "gravida", "dictum"
    ];


    var name = {
      "first_name": ["Aaliyah","Aaron","Abagail","Abbey","Abbie","Abbigail","Abby","Abdiel","Abdul","Abdullah","Abe","Abel","Abelardo","Abigail","Abigale","Abigayle","Abner","Abraham","Ada","Adah","Adalberto","Adaline","Adam","Adan","Addie","Addison","Adela","Adelbert","Adele","Adelia","Adeline","Adell","Adella","Adelle","Aditya","Adolf","Adolfo","Adolph","Adolphus","Adonis","Adrain","Adrian","Adriana","Adrianna","Adriel","Adrien","Adrienne","Afton","Aglae","Agnes","Agustin","Agustina","Ahmad","Ahmed","Aida","Aidan","Aiden","Aileen","Aimee","Aisha","Aiyana","Akeem","Al","Alaina","Alan","Alana","Alanis","Alanna","Alayna","Alba","Albert","Alberta","Albertha","Alberto","Albin","Albina","Alda","Alden","Alec","Aleen","Alejandra","Alejandrin","Alek","Alena","Alene","Alessandra","Alessandro","Alessia","Aletha","Alex","Alexa","Alexander","Alexandra","Alexandre","Alexandrea","Alexandria","Alexandrine","Alexandro","Alexane","Alexanne","Alexie","Alexis","Alexys","Alexzander","Alf","Alfonso","Alfonzo","Alford","Alfred","Alfreda","Alfredo","Ali","Alia","Alice","Alicia","Alisa","Alisha","Alison","Alivia","Aliya","Aliyah","Aliza","Alize","Allan","Allen","Allene","Allie","Allison","Ally","Alphonso","Alta","Althea","Alva","Alvah","Alvena","Alvera","Alverta","Alvina","Alvis","Alyce","Alycia","Alysa","Alysha","Alyson","Alysson","Amalia","Amanda","Amani","Amara","Amari","Amaya","Amber","Ambrose","Amelia","Amelie","Amely","America","Americo","Amie","Amina","Amir","Amira","Amiya","Amos","Amparo","Amy","Amya","Ana","Anabel","Anabelle","Anahi","Anais","Anastacio","Anastasia","Anderson","Andre","Andreane","Andreanne","Andres","Andrew","Andy","Angel","Angela","Angelica","Angelina","Angeline","Angelita","Angelo","Angie","Angus","Anibal","Anika","Anissa","Anita","Aniya","Aniyah","Anjali","Anna","Annabel","Annabell","Annabelle","Annalise","Annamae","Annamarie","Anne","Annetta","Annette","Annie","Ansel","Ansley","Anthony","Antoinette","Antone","Antonetta","Antonette","Antonia","Antonietta","Antonina","Antonio","Antwan","Antwon","Anya","April","Ara","Araceli","Aracely","Arch","Archibald","Ardella","Arden","Ardith","Arely","Ari","Ariane","Arianna","Aric","Ariel","Arielle","Arjun","Arlene","Arlie","Arlo","Armand","Armando","Armani","Arnaldo","Arne","Arno","Arnold","Arnoldo","Arnulfo","Aron","Art","Arthur","Arturo","Arvel","Arvid","Arvilla","Aryanna","Asa","Asha","Ashlee","Ashleigh","Ashley","Ashly","Ashlynn","Ashton","Ashtyn","Asia","Assunta","Astrid","Athena","Aubree","Aubrey","Audie","Audra","Audreanne","Audrey","August","Augusta","Augustine","Augustus","Aurelia","Aurelie","Aurelio","Aurore","Austen","Austin","Austyn","Autumn","Ava","Avery","Avis","Axel","Ayana","Ayden","Ayla","Aylin","Baby","Bailee","Bailey","Barbara","Barney","Baron","Barrett","Barry","Bart","Bartholome","Barton","Baylee","Beatrice","Beau","Beaulah","Bell","Bella","Belle","Ben","Benedict","Benjamin","Bennett","Bennie","Benny","Benton","Berenice","Bernadette","Bernadine","Bernard","Bernardo","Berneice","Bernhard","Bernice","Bernie","Berniece","Bernita","Berry","Bert","Berta","Bertha","Bertram","Bertrand","Beryl","Bessie","Beth","Bethany","Bethel","Betsy","Bette","Bettie","Betty","Bettye","Beulah","Beverly","Bianka","Bill","Billie","Billy","Birdie","Blair","Blaise","Blake","Blanca","Blanche","Blaze","Bo","Bobbie","Bobby","Bonita","Bonnie","Boris","Boyd","Brad","Braden","Bradford","Bradley","Bradly","Brady","Braeden","Brain","Brandi","Brando","Brandon","Brandt","Brandy","Brandyn","Brannon","Branson","Brant","Braulio","Braxton","Brayan","Breana","Breanna","Breanne","Brenda","Brendan","Brenden","Brendon","Brenna","Brennan","Brennon","Brent","Bret","Brett","Bria","Brian","Briana","Brianne","Brice","Bridget","Bridgette","Bridie","Brielle","Brigitte","Brionna","Brisa","Britney","Brittany","Brock","Broderick","Brody","Brook","Brooke","Brooklyn","Brooks","Brown","Bruce","Bryana","Bryce","Brycen","Bryon","Buck","Bud","Buddy","Buford","Bulah","Burdette","Burley","Burnice","Buster","Cade","Caden","Caesar","Caitlyn","Cale","Caleb","Caleigh","Cali","Calista","Callie","Camden","Cameron","Camila","Camilla","Camille","Camren","Camron","Camryn","Camylle","Candace","Candelario","Candice","Candida","Candido","Cara","Carey","Carissa","Carlee","Carleton","Carley","Carli","Carlie","Carlo","Carlos","Carlotta","Carmel","Carmela","Carmella","Carmelo","Carmen","Carmine","Carol","Carolanne","Carole","Carolina","Caroline","Carolyn","Carolyne","Carrie","Carroll","Carson","Carter","Cary","Casandra","Casey","Casimer","Casimir","Casper","Cassandra","Cassandre","Cassidy","Cassie","Catalina","Caterina","Catharine","Catherine","Cathrine","Cathryn","Cathy","Cayla","Ceasar","Cecelia","Cecil","Cecile","Cecilia","Cedrick","Celestine","Celestino","Celia","Celine","Cesar","Chad","Chadd","Chadrick","Chaim","Chance","Chandler","Chanel","Chanelle","Charity","Charlene","Charles","Charley","Charlie","Charlotte","Chase","Chasity","Chauncey","Chaya","Chaz","Chelsea","Chelsey","Chelsie","Chesley","Chester","Chet","Cheyanne","Cheyenne","Chloe","Chris","Christ","Christa","Christelle","Christian","Christiana","Christina","Christine","Christop","Christophe","Christopher","Christy","Chyna","Ciara","Cicero","Cielo","Cierra","Cindy","Citlalli","Clair","Claire","Clara","Clarabelle","Clare","Clarissa","Clark","Claud","Claude","Claudia","Claudie","Claudine","Clay","Clemens","Clement","Clementina","Clementine","Clemmie","Cleo","Cleora","Cleta","Cletus","Cleve","Cleveland","Clifford","Clifton","Clint","Clinton","Clotilde","Clovis","Cloyd","Clyde","Coby","Cody","Colby","Cole","Coleman","Colin","Colleen","Collin","Colt","Colten","Colton","Columbus","Concepcion","Conner","Connie","Connor","Conor","Conrad","Constance","Constantin","Consuelo","Cooper","Cora","Coralie","Corbin","Cordelia","Cordell","Cordia","Cordie","Corene","Corine","Cornelius","Cornell","Corrine","Cortez","Cortney","Cory","Coty","Courtney","Coy","Craig","Crawford","Creola","Cristal","Cristian","Cristina","Cristobal","Cristopher","Cruz","Crystal","Crystel","Cullen","Curt","Curtis","Cydney","Cynthia","Cyril","Cyrus","Dagmar","Dahlia","Daija","Daisha","Daisy","Dakota","Dale","Dallas","Dallin","Dalton","Damaris","Dameon","Damian","Damien","Damion","Damon","Dan","Dana","Dandre","Dane","D'angelo","Dangelo","Danial","Daniela","Daniella","Danielle","Danika","Dannie","Danny","Dante","Danyka","Daphne","Daphnee","Daphney","Darby","Daren","Darian","Dariana","Darien","Dario","Darion","Darius","Darlene","Daron","Darrel","Darrell","Darren","Darrick","Darrin","Darrion","Darron","Darryl","Darwin","Daryl","Dashawn","Dasia","Dave","David","Davin","Davion","Davon","Davonte","Dawn","Dawson","Dax","Dayana","Dayna","Dayne","Dayton","Dean","Deangelo","Deanna","Deborah","Declan","Dedric","Dedrick","Dee","Deion","Deja","Dejah","Dejon","Dejuan","Delaney","Delbert","Delfina","Delia","Delilah","Dell","Della","Delmer","Delores","Delpha","Delphia","Delphine","Delta","Demarco","Demarcus","Demario","Demetris","Demetrius","Demond","Dena","Denis","Dennis","Deon","Deondre","Deontae","Deonte","Dereck","Derek","Derick","Deron","Derrick","Deshaun","Deshawn","Desiree","Desmond","Dessie","Destany","Destin","Destinee","Destiney","Destini","Destiny","Devan","Devante","Deven","Devin","Devon","Devonte","Devyn","Dewayne","Dewitt","Dexter","Diamond","Diana","Dianna","Diego","Dillan","Dillon","Dimitri","Dina","Dino","Dion","Dixie","Dock","Dolly","Dolores","Domenic","Domenica","Domenick","Domenico","Domingo","Dominic","Dominique","Don","Donald","Donato","Donavon","Donna","Donnell","Donnie","Donny","Dora","Dorcas","Dorian","Doris","Dorothea","Dorothy","Dorris","Dortha","Dorthy","Doug","Douglas","Dovie","Doyle","Drake","Drew","Duane","Dudley","Dulce","Duncan","Durward","Dustin","Dusty","Dwight","Dylan","Earl","Earlene","Earline","Earnest","Earnestine","Easter","Easton","Ebba","Ebony","Ed","Eda","Edd","Eddie","Eden","Edgar","Edgardo","Edison","Edmond","Edmund","Edna","Eduardo","Edward","Edwardo","Edwin","Edwina","Edyth","Edythe","Effie","Efrain","Efren","Eileen","Einar","Eino","Eladio","Elaina","Elbert","Elda","Eldon","Eldora","Eldred","Eldridge","Eleanora","Eleanore","Eleazar","Electa","Elena","Elenor","Elenora","Eleonore","Elfrieda","Eli","Elian","Eliane","Elias","Eliezer","Elijah","Elinor","Elinore","Elisa","Elisabeth","Elise","Eliseo","Elisha","Elissa","Eliza","Elizabeth","Ella","Ellen","Ellie","Elliot","Elliott","Ellis","Ellsworth","Elmer","Elmira","Elmo","Elmore","Elna","Elnora","Elody","Eloisa","Eloise","Elouise","Eloy","Elroy","Elsa","Else","Elsie","Elta","Elton","Elva","Elvera","Elvie","Elvis","Elwin","Elwyn","Elyse","Elyssa","Elza","Emanuel","Emelia","Emelie","Emely","Emerald","Emerson","Emery","Emie","Emil","Emile","Emilia","Emiliano","Emilie","Emilio","Emily","Emma","Emmalee","Emmanuel","Emmanuelle","Emmet","Emmett","Emmie","Emmitt","Emmy","Emory","Ena","Enid","Enoch","Enola","Enos","Enrico","Enrique","Ephraim","Era","Eriberto","Eric","Erica","Erich","Erick","Ericka","Erik","Erika","Erin","Erling","Erna","Ernest","Ernestina","Ernestine","Ernesto","Ernie","Ervin","Erwin","Eryn","Esmeralda","Esperanza","Esta","Esteban","Estefania","Estel","Estell","Estella","Estelle","Estevan","Esther","Estrella","Etha","Ethan","Ethel","Ethelyn","Ethyl","Ettie","Eudora","Eugene","Eugenia","Eula","Eulah","Eulalia","Euna","Eunice","Eusebio","Eva","Evalyn","Evan","Evangeline","Evans","Eve","Eveline","Evelyn","Everardo","Everett","Everette","Evert","Evie","Ewald","Ewell","Ezekiel","Ezequiel","Ezra","Fabian","Fabiola","Fae","Fannie","Fanny","Fatima","Faustino","Fausto","Favian","Fay","Faye","Federico","Felicia","Felicita","Felicity","Felipa","Felipe","Felix","Felton","Fermin","Fern","Fernando","Ferne","Fidel","Filiberto","Filomena","Finn","Fiona","Flavie","Flavio","Fleta","Fletcher","Flo","Florence","Florencio","Florian","Florida","Florine","Flossie","Floy","Floyd","Ford","Forest","Forrest","Foster","Frances","Francesca","Francesco","Francis","Francisca","Francisco","Franco","Frank","Frankie","Franz","Fred","Freda","Freddie","Freddy","Frederic","Frederick","Frederik","Frederique","Fredrick","Fredy","Freeda","Freeman","Freida","Frida","Frieda","Friedrich","Fritz","Furman","Gabe","Gabriel","Gabriella","Gabrielle","Gaetano","Gage","Gail","Gardner","Garett","Garfield","Garland","Garnet","Garnett","Garret","Garrett","Garrick","Garrison","Garry","Garth","Gaston","Gavin","Gay","Gayle","Gaylord","Gene","General","Genesis","Genevieve","Gennaro","Genoveva","Geo","Geoffrey","George","Georgette","Georgiana","Georgianna","Geovanni","Geovanny","Geovany","Gerald","Geraldine","Gerard","Gerardo","Gerda","Gerhard","Germaine","German","Gerry","Gerson","Gertrude","Gia","Gianni","Gideon","Gilbert","Gilberto","Gilda","Giles","Gillian","Gina","Gino","Giovani","Giovanna","Giovanni","Giovanny","Gisselle","Giuseppe","Gladyce","Gladys","Glen","Glenda","Glenna","Glennie","Gloria","Godfrey","Golda","Golden","Gonzalo","Gordon","Grace","Gracie","Graciela","Grady","Graham","Grant","Granville","Grayce","Grayson","Green","Greg","Gregg","Gregoria","Gregorio","Gregory","Greta","Gretchen","Greyson","Griffin","Grover","Guadalupe","Gudrun","Guido","Guillermo","Guiseppe","Gunnar","Gunner","Gus","Gussie","Gust","Gustave","Guy","Gwen","Gwendolyn","Hadley","Hailee","Hailey","Hailie","Hal","Haleigh","Haley","Halie","Halle","Hallie","Hank","Hanna","Hannah","Hans","Hardy","Harley","Harmon","Harmony","Harold","Harrison","Harry","Harvey","Haskell","Hassan","Hassie","Hattie","Haven","Hayden","Haylee","Hayley","Haylie","Hazel","Hazle","Heath","Heather","Heaven","Heber","Hector","Heidi","Helen","Helena","Helene","Helga","Hellen","Helmer","Heloise","Henderson","Henri","Henriette","Henry","Herbert","Herman","Hermann","Hermina","Herminia","Herminio","Hershel","Herta","Hertha","Hester","Hettie","Hilario","Hilbert","Hilda","Hildegard","Hillard","Hillary","Hilma","Hilton","Hipolito","Hiram","Hobart","Holden","Hollie","Hollis","Holly","Hope","Horace","Horacio","Hortense","Hosea","Houston","Howard","Howell","Hoyt","Hubert","Hudson","Hugh","Hulda","Humberto","Hunter","Hyman","Ian","Ibrahim","Icie","Ida","Idell","Idella","Ignacio","Ignatius","Ike","Ila","Ilene","Iliana","Ima","Imani","Imelda","Immanuel","Imogene","Ines","Irma","Irving","Irwin","Isaac","Isabel","Isabell","Isabella","Isabelle","Isac","Isadore","Isai","Isaiah","Isaias","Isidro","Ismael","Isobel","Isom","Israel","Issac","Itzel","Iva","Ivah","Ivory","Ivy","Izabella","Izaiah","Jabari","Jace","Jacey","Jacinthe","Jacinto","Jack","Jackeline","Jackie","Jacklyn","Jackson","Jacky","Jaclyn","Jacquelyn","Jacques","Jacynthe","Jada","Jade","Jaden","Jadon","Jadyn","Jaeden","Jaida","Jaiden","Jailyn","Jaime","Jairo","Jakayla","Jake","Jakob","Jaleel","Jalen","Jalon","Jalyn","Jamaal","Jamal","Jamar","Jamarcus","Jamel","Jameson","Jamey","Jamie","Jamil","Jamir","Jamison","Jammie","Jan","Jana","Janae","Jane","Janelle","Janessa","Janet","Janice","Janick","Janie","Janis","Janiya","Jannie","Jany","Jaquan","Jaquelin","Jaqueline","Jared","Jaren","Jarod","Jaron","Jarred","Jarrell","Jarret","Jarrett","Jarrod","Jarvis","Jasen","Jasmin","Jason","Jasper","Jaunita","Javier","Javon","Javonte","Jay","Jayce","Jaycee","Jayda","Jayde","Jayden","Jaydon","Jaylan","Jaylen","Jaylin","Jaylon","Jayme","Jayne","Jayson","Jazlyn","Jazmin","Jazmyn","Jazmyne","Jean","Jeanette","Jeanie","Jeanne","Jed","Jedediah","Jedidiah","Jeff","Jefferey","Jeffery","Jeffrey","Jeffry","Jena","Jenifer","Jennie","Jennifer","Jennings","Jennyfer","Jensen","Jerad","Jerald","Jeramie","Jeramy","Jerel","Jeremie","Jeremy","Jermain","Jermaine","Jermey","Jerod","Jerome","Jeromy","Jerrell","Jerrod","Jerrold","Jerry","Jess","Jesse","Jessica","Jessie","Jessika","Jessy","Jessyca","Jesus","Jett","Jettie","Jevon","Jewel","Jewell","Jillian","Jimmie","Jimmy","Jo","Joan","Joana","Joanie","Joanne","Joannie","Joanny","Joany","Joaquin","Jocelyn","Jodie","Jody","Joe","Joel","Joelle","Joesph","Joey","Johan","Johann","Johanna","Johathan","John","Johnathan","Johnathon","Johnnie","Johnny","Johnpaul","Johnson","Jolie","Jon","Jonas","Jonatan","Jonathan","Jonathon","Jordan","Jordane","Jordi","Jordon","Jordy","Jordyn","Jorge","Jose","Josefa","Josefina","Joseph","Josephine","Josh","Joshua","Joshuah","Josiah","Josiane","Josianne","Josie","Josue","Jovan","Jovani","Jovanny","Jovany","Joy","Joyce","Juana","Juanita","Judah","Judd","Jude","Judge","Judson","Judy","Jules","Julia","Julian","Juliana","Julianne","Julie","Julien","Juliet","Julio","Julius","June","Junior","Junius","Justen","Justice","Justina","Justine","Juston","Justus","Justyn","Juvenal","Juwan","Kacey","Kaci","Kacie","Kade","Kaden","Kadin","Kaela","Kaelyn","Kaia","Kailee","Kailey","Kailyn","Kaitlin","Kaitlyn","Kale","Kaleb","Kaleigh","Kaley","Kali","Kallie","Kameron","Kamille","Kamren","Kamron","Kamryn","Kane","Kara","Kareem","Karelle","Karen","Kari","Kariane","Karianne","Karina","Karine","Karl","Karlee","Karley","Karli","Karlie","Karolann","Karson","Kasandra","Kasey","Kassandra","Katarina","Katelin","Katelyn","Katelynn","Katharina","Katherine","Katheryn","Kathleen","Kathlyn","Kathryn","Kathryne","Katlyn","Katlynn","Katrina","Katrine","Kattie","Kavon","Kay","Kaya","Kaycee","Kayden","Kayla","Kaylah","Kaylee","Kayleigh","Kayley","Kayli","Kaylie","Kaylin","Keagan","Keanu","Keara","Keaton","Keegan","Keeley","Keely","Keenan","Keira","Keith","Kellen","Kelley","Kelli","Kellie","Kelly","Kelsi","Kelsie","Kelton","Kelvin","Ken","Kendall","Kendra","Kendrick","Kenna","Kennedi","Kennedy","Kenneth","Kennith","Kenny","Kenton","Kenya","Kenyatta","Kenyon","Keon","Keshaun","Keshawn","Keven","Kevin","Kevon","Keyon","Keyshawn","Khalid","Khalil","Kian","Kiana","Kianna","Kiara","Kiarra","Kiel","Kiera","Kieran","Kiley","Kim","Kimberly","King","Kip","Kira","Kirk","Kirsten","Kirstin","Kitty","Kobe","Koby","Kody","Kolby","Kole","Korbin","Korey","Kory","Kraig","Kris","Krista","Kristian","Kristin","Kristina","Kristofer","Kristoffer","Kristopher","Kristy","Krystal","Krystel","Krystina","Kurt","Kurtis","Kyla","Kyle","Kylee","Kyleigh","Kyler","Kylie","Kyra","Lacey","Lacy","Ladarius","Lafayette","Laila","Laisha","Lamar","Lambert","Lamont","Lance","Landen","Lane","Laney","Larissa","Laron","Larry","Larue","Laura","Laurel","Lauren","Laurence","Lauretta","Lauriane","Laurianne","Laurie","Laurine","Laury","Lauryn","Lavada","Lavern","Laverna","Laverne","Lavina","Lavinia","Lavon","Lavonne","Lawrence","Lawson","Layla","Layne","Lazaro","Lea","Leann","Leanna","Leanne","Leatha","Leda","Lee","Leif","Leila","Leilani","Lela","Lelah","Leland","Lelia","Lempi","Lemuel","Lenna","Lennie","Lenny","Lenora","Lenore","Leo","Leola","Leon","Leonard","Leonardo","Leone","Leonel","Leonie","Leonor","Leonora","Leopold","Leopoldo","Leora","Lera","Lesley","Leslie","Lesly","Lessie","Lester","Leta","Letha","Letitia","Levi","Lew","Lewis","Lexi","Lexie","Lexus","Lia","Liam","Liana","Libbie","Libby","Lila","Lilian","Liliana","Liliane","Lilla","Lillian","Lilliana","Lillie","Lilly","Lily","Lilyan","Lina","Lincoln","Linda","Lindsay","Lindsey","Linnea","Linnie","Linwood","Lionel","Lisa","Lisandro","Lisette","Litzy","Liza","Lizeth","Lizzie","Llewellyn","Lloyd","Logan","Lois","Lola","Lolita","Loma","Lon","London","Lonie","Lonnie","Lonny","Lonzo","Lora","Loraine","Loren","Lorena","Lorenz","Lorenza","Lorenzo","Lori","Lorine","Lorna","Lottie","Lou","Louie","Louisa","Lourdes","Louvenia","Lowell","Loy","Loyal","Loyce","Lucas","Luciano","Lucie","Lucienne","Lucile","Lucinda","Lucio","Lucious","Lucius","Lucy","Ludie","Ludwig","Lue","Luella","Luigi","Luis","Luisa","Lukas","Lula","Lulu","Luna","Lupe","Lura","Lurline","Luther","Luz","Lyda","Lydia","Lyla","Lynn","Lyric","Lysanne","Mabel","Mabelle","Mable","Mac","Macey","Maci","Macie","Mack","Mackenzie","Macy","Madaline","Madalyn","Maddison","Madeline","Madelyn","Madelynn","Madge","Madie","Madilyn","Madisen","Madison","Madisyn","Madonna","Madyson","Mae","Maegan","Maeve","Mafalda","Magali","Magdalen","Magdalena","Maggie","Magnolia","Magnus","Maia","Maida","Maiya","Major","Makayla","Makenna","Makenzie","Malachi","Malcolm","Malika","Malinda","Mallie","Mallory","Malvina","Mandy","Manley","Manuel","Manuela","Mara","Marc","Marcel","Marcelina","Marcelino","Marcella","Marcelle","Marcellus","Marcelo","Marcia","Marco","Marcos","Marcus","Margaret","Margarete","Margarett","Margaretta","Margarette","Margarita","Marge","Margie","Margot","Margret","Marguerite","Maria","Mariah","Mariam","Marian","Mariana","Mariane","Marianna","Marianne","Mariano","Maribel","Marie","Mariela","Marielle","Marietta","Marilie","Marilou","Marilyne","Marina","Mario","Marion","Marisa","Marisol","Maritza","Marjolaine","Marjorie","Marjory","Mark","Markus","Marlee","Marlen","Marlene","Marley","Marlin","Marlon","Marques","Marquis","Marquise","Marshall","Marta","Martin","Martina","Martine","Marty","Marvin","Mary","Maryam","Maryjane","Maryse","Mason","Mateo","Mathew","Mathias","Mathilde","Matilda","Matilde","Matt","Matteo","Mattie","Maud","Maude","Maudie","Maureen","Maurice","Mauricio","Maurine","Maverick","Mavis","Max","Maxie","Maxime","Maximilian","Maximillia","Maximillian","Maximo","Maximus","Maxine","Maxwell","May","Maya","Maybell","Maybelle","Maye","Maymie","Maynard","Mayra","Mazie","Mckayla","Mckenna","Mckenzie","Meagan","Meaghan","Meda","Megane","Meggie","Meghan","Mekhi","Melany","Melba","Melisa","Melissa","Mellie","Melody","Melvin","Melvina","Melyna","Melyssa","Mercedes","Meredith","Merl","Merle","Merlin","Merritt","Mertie","Mervin","Meta","Mia","Micaela","Micah","Michael","Michaela","Michale","Micheal","Michel","Michele","Michelle","Miguel","Mikayla","Mike","Mikel","Milan","Miles","Milford","Miller","Millie","Milo","Milton","Mina","Minerva","Minnie","Miracle","Mireille","Mireya","Misael","Missouri","Misty","Mitchel","Mitchell","Mittie","Modesta","Modesto","Mohamed","Mohammad","Mohammed","Moises","Mollie","Molly","Mona","Monica","Monique","Monroe","Monserrat","Monserrate","Montana","Monte","Monty","Morgan","Moriah","Morris","Mortimer","Morton","Mose","Moses","Moshe","Mossie","Mozell","Mozelle","Muhammad","Muriel","Murl","Murphy","Murray","Mustafa","Mya","Myah","Mylene","Myles","Myra","Myriam","Myrl","Myrna","Myron","Myrtice","Myrtie","Myrtis","Myrtle","Nadia","Nakia","Name","Nannie","Naomi","Naomie","Napoleon","Narciso","Nash","Nasir","Nat","Natalia","Natalie","Natasha","Nathan","Nathanael","Nathanial","Nathaniel","Nathen","Nayeli","Neal","Ned","Nedra","Neha","Neil","Nelda","Nella","Nelle","Nellie","Nels","Nelson","Neoma","Nestor","Nettie","Neva","Newell","Newton","Nia","Nicholas","Nicholaus","Nichole","Nick","Nicklaus","Nickolas","Nico","Nicola","Nicolas","Nicole","Nicolette","Nigel","Nikita","Nikki","Nikko","Niko","Nikolas","Nils","Nina","Noah","Noble","Noe","Noel","Noelia","Noemi","Noemie","Noemy","Nola","Nolan","Nona","Nora","Norbert","Norberto","Norene","Norma","Norris","Norval","Norwood","Nova","Novella","Nya","Nyah","Nyasia","Obie","Oceane","Ocie","Octavia","Oda","Odell","Odessa","Odie","Ofelia","Okey","Ola","Olaf","Ole","Olen","Oleta","Olga","Olin","Oliver","Ollie","Oma","Omari","Omer","Ona","Onie","Opal","Ophelia","Ora","Oral","Oran","Oren","Orie","Orin","Orion","Orland","Orlando","Orlo","Orpha","Orrin","Orval","Orville","Osbaldo","Osborne","Oscar","Osvaldo","Oswald","Oswaldo","Otha","Otho","Otilia","Otis","Ottilie","Ottis","Otto","Ova","Owen","Ozella","Pablo","Paige","Palma","Pamela","Pansy","Paolo","Paris","Parker","Pascale","Pasquale","Pat","Patience","Patricia","Patrick","Patsy","Pattie","Paul","Paula","Pauline","Paxton","Payton","Pearl","Pearlie","Pearline","Pedro","Peggie","Penelope","Percival","Percy","Perry","Pete","Peter","Petra","Peyton","Philip","Phoebe","Phyllis","Pierce","Pierre","Pietro","Pink","Pinkie","Piper","Polly","Porter","Precious","Presley","Preston","Price","Prince","Princess","Priscilla","Providenci","Prudence","Queen","Queenie","Quentin","Quincy","Quinn","Quinten","Quinton","Rachael","Rachel","Rachelle","Rae","Raegan","Rafael","Rafaela","Raheem","Rahsaan","Rahul","Raina","Raleigh","Ralph","Ramiro","Ramon","Ramona","Randal","Randall","Randi","Randy","Ransom","Raoul","Raphael","Raphaelle","Raquel","Rashad","Rashawn","Rasheed","Raul","Raven","Ray","Raymond","Raymundo","Reagan","Reanna","Reba","Rebeca","Rebecca","Rebeka","Rebekah","Reece","Reed","Reese","Regan","Reggie","Reginald","Reid","Reilly","Reina","Reinhold","Remington","Rene","Renee","Ressie","Reta","Retha","Retta","Reuben","Reva","Rex","Rey","Reyes","Reymundo","Reyna","Reynold","Rhea","Rhett","Rhianna","Rhiannon","Rhoda","Ricardo","Richard","Richie","Richmond","Rick","Rickey","Rickie","Ricky","Rico","Rigoberto","Riley","Rita","River","Robb","Robbie","Robert","Roberta","Roberto","Robin","Robyn","Rocio","Rocky","Rod","Roderick","Rodger","Rodolfo","Rodrick","Rodrigo","Roel","Rogelio","Roger","Rogers","Rolando","Rollin","Roma","Romaine","Roman","Ron","Ronaldo","Ronny","Roosevelt","Rory","Rosa","Rosalee","Rosalia","Rosalind","Rosalinda","Rosalyn","Rosamond","Rosanna","Rosario","Roscoe","Rose","Rosella","Roselyn","Rosemarie","Rosemary","Rosendo","Rosetta","Rosie","Rosina","Roslyn","Ross","Rossie","Rowan","Rowena","Rowland","Roxane","Roxanne","Roy","Royal","Royce","Rozella","Ruben","Rubie","Ruby","Rubye","Rudolph","Rudy","Rupert","Russ","Russel","Russell","Rusty","Ruth","Ruthe","Ruthie","Ryan","Ryann","Ryder","Rylan","Rylee","Ryleigh","Ryley","Sabina","Sabrina","Sabryna","Sadie","Sadye","Sage","Saige","Sallie","Sally","Salma","Salvador","Salvatore","Sam","Samanta","Samantha","Samara","Samir","Sammie","Sammy","Samson","Sandra","Sandrine","Sandy","Sanford","Santa","Santiago","Santina","Santino","Santos","Sarah","Sarai","Sarina","Sasha","Saul","Savanah","Savanna","Savannah","Savion","Scarlett","Schuyler","Scot","Scottie","Scotty","Seamus","Sean","Sebastian","Sedrick","Selena","Selina","Selmer","Serena","Serenity","Seth","Shad","Shaina","Shakira","Shana","Shane","Shanel","Shanelle","Shania","Shanie","Shaniya","Shanna","Shannon","Shanny","Shanon","Shany","Sharon","Shaun","Shawn","Shawna","Shaylee","Shayna","Shayne","Shea","Sheila","Sheldon","Shemar","Sheridan","Sherman","Sherwood","Shirley","Shyann","Shyanne","Sibyl","Sid","Sidney","Sienna","Sierra","Sigmund","Sigrid","Sigurd","Silas","Sim","Simeon","Simone","Sincere","Sister","Skye","Skyla","Skylar","Sofia","Soledad","Solon","Sonia","Sonny","Sonya","Sophia","Sophie","Spencer","Stacey","Stacy","Stan","Stanford","Stanley","Stanton","Stefan","Stefanie","Stella","Stephan","Stephania","Stephanie","Stephany","Stephen","Stephon","Sterling","Steve","Stevie","Stewart","Stone","Stuart","Summer","Sunny","Susan","Susana","Susanna","Susie","Suzanne","Sven","Syble","Sydnee","Sydney","Sydni","Sydnie","Sylvan","Sylvester","Sylvia","Tabitha","Tad","Talia","Talon","Tamara","Tamia","Tania","Tanner","Tanya","Tara","Taryn","Tate","Tatum","Tatyana","Taurean","Tavares","Taya","Taylor","Teagan","Ted","Telly","Terence","Teresa","Terrance","Terrell","Terrence","Terrill","Terry","Tess","Tessie","Tevin","Thad","Thaddeus","Thalia","Thea","Thelma","Theo","Theodora","Theodore","Theresa","Therese","Theresia","Theron","Thomas","Thora","Thurman","Tia","Tiana","Tianna","Tiara","Tierra","Tiffany","Tillman","Timmothy","Timmy","Timothy","Tina","Tito","Titus","Tobin","Toby","Tod","Tom","Tomas","Tomasa","Tommie","Toney","Toni","Tony","Torey","Torrance","Torrey","Toy","Trace","Tracey","Tracy","Travis","Travon","Tre","Tremaine","Tremayne","Trent","Trenton","Tressa","Tressie","Treva","Trever","Trevion","Trevor","Trey","Trinity","Trisha","Tristian","Tristin","Triston","Troy","Trudie","Trycia","Trystan","Turner","Twila","Tyler","Tyra","Tyree","Tyreek","Tyrel","Tyrell","Tyrese","Tyrique","Tyshawn","Tyson","Ubaldo","Ulices","Ulises","Una","Unique","Urban","Uriah","Uriel","Ursula","Vada","Valentin","Valentina","Valentine","Valerie","Vallie","Van","Vance","Vanessa","Vaughn","Veda","Velda","Vella","Velma","Velva","Vena","Verda","Verdie","Vergie","Verla","Verlie","Vern","Verna","Verner","Vernice","Vernie","Vernon","Verona","Veronica","Vesta","Vicenta","Vicente","Vickie","Vicky","Victor","Victoria","Vida","Vidal","Vilma","Vince","Vincent","Vincenza","Vincenzo","Vinnie","Viola","Violet","Violette","Virgie","Virgil","Virginia","Virginie","Vita","Vito","Viva","Vivian","Viviane","Vivianne","Vivien","Vivienne","Vladimir","Wade","Waino","Waldo","Walker","Wallace","Walter","Walton","Wanda","Ward","Warren","Watson","Wava","Waylon","Wayne","Webster","Weldon","Wellington","Wendell","Wendy","Werner","Westley","Weston","Whitney","Wilber","Wilbert","Wilburn","Wiley","Wilford","Wilfred","Wilfredo","Wilfrid","Wilhelm","Wilhelmine","Will","Willa","Willard","William","Willie","Willis","Willow","Willy","Wilma","Wilmer","Wilson","Wilton","Winfield","Winifred","Winnifred","Winona","Winston","Woodrow","Wyatt","Wyman","Xander","Xavier","Xzavier","Yadira","Yasmeen","Yasmin","Yasmine","Yazmin","Yesenia","Yessenia","Yolanda","Yoshiko","Yvette","Yvonne","Zachariah","Zachary","Zachery","Zack","Zackary","Zackery","Zakary","Zander","Zane","Zaria","Zechariah","Zelda","Zella","Zelma","Zena","Zetta","Zion","Zita","Zoe","Zoey","Zoie","Zoila","Zola","Zora","Zula"],
      "last_name": ["Abbott","Abernathy","Abshire","Adams","Altenwerth","Anderson","Ankunding","Armstrong","Auer","Aufderhar","Bahringer","Bailey","Balistreri","Barrows","Bartell","Bartoletti","Barton","Bashirian","Batz","Bauch","Baumbach","Bayer","Beahan","Beatty","Bechtelar","Becker","Bednar","Beer","Beier","Berge","Bergnaum","Bergstrom","Bernhard","Bernier","Bins","Blanda","Blick","Block","Bode","Boehm","Bogan","Bogisich","Borer","Bosco","Botsford","Boyer","Boyle","Bradtke","Brakus","Braun","Breitenberg","Brekke","Brown","Bruen","Buckridge","Carroll","Carter","Cartwright","Casper","Cassin","Champlin","Christiansen","Cole","Collier","Collins","Conn","Connelly","Conroy","Considine","Corkery","Cormier","Corwin","Cremin","Crist","Crona","Cronin","Crooks","Cruickshank","Cummerata","Cummings","Dach","D'Amore","Daniel","Dare","Daugherty","Davis","Deckow","Denesik","Dibbert","Dickens","Dicki","Dickinson","Dietrich","Donnelly","Dooley","Douglas","Doyle","DuBuque","Durgan","Ebert","Effertz","Eichmann","Emard","Emmerich","Erdman","Ernser","Fadel","Fahey","Farrell","Fay","Feeney","Feest","Feil","Ferry","Fisher","Flatley","Frami","Franecki","Friesen","Fritsch","Funk","Gaylord","Gerhold","Gerlach","Gibson","Gislason","Gleason","Gleichner","Glover","Goldner","Goodwin","Gorczany","Gottlieb","Goyette","Grady","Graham","Grant","Green","Greenfelder","Greenholt","Grimes","Gulgowski","Gusikowski","Gutkowski","Gutmann","Haag","Hackett","Hagenes","Hahn","Haley","Halvorson","Hamill","Hammes","Hand","Hane","Hansen","Harber","Harris","Hartmann","Harvey","Hauck","Hayes","Heaney","Heathcote","Hegmann","Heidenreich","Heller","Herman","Hermann","Hermiston","Herzog","Hessel","Hettinger","Hickle","Hilll","Hills","Hilpert","Hintz","Hirthe","Hodkiewicz","Hoeger","Homenick","Hoppe","Howe","Howell","Hudson","Huel","Huels","Hyatt","Jacobi","Jacobs","Jacobson","Jakubowski","Jaskolski","Jast","Jenkins","Jerde","Johns","Johnson","Johnston","Jones","Kassulke","Kautzer","Keebler","Keeling","Kemmer","Kerluke","Kertzmann","Kessler","Kiehn","Kihn","Kilback","King","Kirlin","Klein","Kling","Klocko","Koch","Koelpin","Koepp","Kohler","Konopelski","Koss","Kovacek","Kozey","Krajcik","Kreiger","Kris","Kshlerin","Kub","Kuhic","Kuhlman","Kuhn","Kulas","Kunde","Kunze","Kuphal","Kutch","Kuvalis","Labadie","Lakin","Lang","Langosh","Langworth","Larkin","Larson","Leannon","Lebsack","Ledner","Leffler","Legros","Lehner","Lemke","Lesch","Leuschke","Lind","Lindgren","Littel","Little","Lockman","Lowe","Lubowitz","Lueilwitz","Luettgen","Lynch","Macejkovic","MacGyver","Maggio","Mann","Mante","Marks","Marquardt","Marvin","Mayer","Mayert","McClure","McCullough","McDermott","McGlynn","McKenzie","McLaughlin","Medhurst","Mertz","Metz","Miller","Mills","Mitchell","Moen","Mohr","Monahan","Moore","Morar","Morissette","Mosciski","Mraz","Mueller","Muller","Murazik","Murphy","Murray","Nader","Nicolas","Nienow","Nikolaus","Nitzsche","Nolan","Oberbrunner","O'Connell","O'Conner","O'Hara","O'Keefe","O'Kon","Okuneva","Olson","Ondricka","O'Reilly","Orn","Ortiz","Osinski","Pacocha","Padberg","Pagac","Parisian","Parker","Paucek","Pfannerstill","Pfeffer","Pollich","Pouros","Powlowski","Predovic","Price","Prohaska","Prosacco","Purdy","Quigley","Quitzon","Rath","Ratke","Rau","Raynor","Reichel","Reichert","Reilly","Reinger","Rempel","Renner","Reynolds","Rice","Rippin","Ritchie","Robel","Roberts","Rodriguez","Rogahn","Rohan","Rolfson","Romaguera","Roob","Rosenbaum","Rowe","Ruecker","Runolfsdottir","Runolfsson","Runte","Russel","Rutherford","Ryan","Sanford","Satterfield","Sauer","Sawayn","Schaden","Schaefer","Schamberger","Schiller","Schimmel","Schinner","Schmeler","Schmidt","Schmitt","Schneider","Schoen","Schowalter","Schroeder","Schulist","Schultz","Schumm","Schuppe","Schuster","Senger","Shanahan","Shields","Simonis","Sipes","Skiles","Smith","Smitham","Spencer","Spinka","Sporer","Stamm","Stanton","Stark","Stehr","Steuber","Stiedemann","Stokes","Stoltenberg","Stracke","Streich","Stroman","Strosin","Swaniawski","Swift","Terry","Thiel","Thompson","Tillman","Torp","Torphy","Towne","Toy","Trantow","Tremblay","Treutel","Tromp","Turcotte","Turner","Ullrich","Upton","Vandervort","Veum","Volkman","Von","VonRueden","Waelchi","Walker","Walsh","Walter","Ward","Waters","Watsica","Weber","Wehner","Weimann","Weissnat","Welch","West","White","Wiegand","Wilderman","Wilkinson","Will","Williamson","Willms","Windler","Wintheiser","Wisoky","Wisozk","Witting","Wiza","Wolf","Wolff","Wuckert","Wunsch","Wyman","Yost","Yundt","Zboncak","Zemlak","Ziemann","Zieme","Zulauf"]
    };

    var icons = [
      "md-menu", "md-arrow-drop-down", "md-flag", "md-home", "md-warning", "md-play-circle-fill",
      "md-forum", "md-content-paste", "md-battery-80", "md-format-textdirection-l-to-r", "md-folder-open",
      "md-desktop-windows", "md-collections", "md-directions-bike", "md-apps", "md-phone-in-talk", "md-people",
      "md-star-half", "md-arrow-drop-down", "md-file-download md-lg", "md-3d-rotation", "md-accessibility",
      "md-account-balance", "md-account-balance-wallet", "md-account-box", "md-account-child", "md-account-circle",
      "md-add-shopping-cart", "md-alarm", "md-alarm-add", "md-alarm-off", "md-alarm-on", "md-android", "md-announcement",
      "md-aspect-ratio", "md-assessment", "md-assignment", "md-assignment-ind", "md-assignment-late", "md-assignment-return",
      "md-assignment-returned", "md-assignment-turned-in", "md-autorenew", "md-backup", "md-book", "md-bookmark",
      "md-bookmark-outline", "md-bug-report", "md-cached", "md-class", "md-credit-card", "md-dashboard", "md-delete",
      "md-description", "md-dns", "md-done", "md-done-all", "md-event", "md-exit-to-app", "md-explore", "md-extension",
      "md-face-unlock", "md-favorite", "md-favorite-outline", "md-find-in-page", "md-find-replace", "md-flip-to-back",
      "md-flip-to-front", "md-get-app", "md-grade", "md-group-work", "md-help", "md-highlight-remove", "md-history",
      "md-home", "md-https", "md-info", "md-info-outline", "md-input", "md-invert-colors", "md-label", "md-label-outline",
      "md-language", "md-launch", "md-list", "md-lock", "md-lock-open", "md-lock-outline", "md-loyalty", "md-markunread-mailbox",
      "md-note-add", "md-open-in-browser", "md-open-in-new", "md-open-with", "md-pageview", "md-payment", "md-perm-camera-mic",
      "md-perm-contact-cal", "md-perm-data-setting", "md-perm-device-info", "md-perm-identity", "md-perm-media", "md-perm-phone-msg",
      "md-perm-scan-wifi", "md-picture-in-picture", "md-polymer", "md-print", "md-query-builder", "md-question-answer", "md-receipt",
      "md-redeem", "md-report-problem", "md-restore", "md-room", "md-schedule", "md-search", "md-settings", "md-settings-applications",
      "md-settings-backup-restore", "md-settings-bluetooth", "md-settings-cell", "md-settings-display", "md-settings-ethernet",
      "md-settings-input-antenna", "md-settings-input-component", "md-settings-input-composite", "md-settings-input-hdmi",
      "md-settings-input-svideo", "md-settings-overscan", "md-settings-phone", "md-settings-power", "md-settings-remote",
      "md-settings-voice", "md-shop", "md-shopping-basket", "md-shopping-cart", "md-shop-two", "md-speaker-notes",
      "md-spellcheck", "md-star-rate", "md-stars", "md-store", "md-subject", "md-swap-horiz", "md-swap-vert",
      "md-swap-vert-circle", "md-system-update-tv", "md-tab", "md-tab-unselected", "md-theaters", "md-thumb-down",
      "md-thumbs-up-down", "md-thumb-up", "md-toc", "md-today", "md-track-changes", "md-translate", "md-trending-down",
      "md-trending-neutral", "md-trending-up", "md-turned-in", "md-turned-in-not", "md-verified-user", "md-view-agenda",
      "md-view-array", "md-view-carousel", "md-view-column", "md-view-day", "md-view-headline", "md-view-list", "md-view-module",
      "md-view-quilt", "md-view-stream", "md-view-week", "md-visibility", "md-visibility-off", "md-wallet-giftcard", "md-wallet-membership",
      "md-wallet-travel", "md-work", "md-error", "md-warning", "md-album", "md-av-timer", "md-closed-caption", "md-equalizer", "md-explicit",
      "md-fast-forward", "md-fast-rewind", "md-games", "md-hearing", "md-high-quality", "md-loop", "md-mic", "md-mic-none",
      "md-mic-off", "md-movie", "md-my-library-add", "md-my-library-books", "md-my-library-music", "md-new-releases", "md-not-interested",
      "md-pause", "md-pause-circle-fill", "md-pause-circle-outline", "md-play-arrow", "md-play-circle-fill",
      "md-play-circle-outline", "md-playlist-add", "md-play-shopping-bag", "md-queue", "md-queue-music", "md-radio",
      "md-recent-actors", "md-repeat", "md-repeat-one", "md-replay", "md-shuffle", "md-skip-next", "md-skip-previous",
      "md-snooze", "md-stop", "md-subtitles", "md-surround-sound", "md-videocam", "md-videocam-off", "md-video-collection",
      "md-volume-down", "md-volume-mute", "md-volume-off", "md-volume-up", "md-web", "md-business", "md-call", "md-call-end",
      "md-call-made", "md-call-merge", "md-call-missed", "md-call-received", "md-call-split", "md-chat", "md-clear-all",
      "md-comment", "md-contacts", "md-dialer-sip", "md-dialpad", "md-dnd-on", "md-email", "md-forum", "md-import-export",
      "md-invert-colors-off", "md-invert-colors-on", "md-live-help", "md-location-off", "md-location-on", "md-message",
      "md-messenger", "md-no-sim", "md-phone", "md-portable-wifi-off", "md-quick-contacts-dialer", "md-quick-contacts-mail",
      "md-ring-volume", "md-stay-current-landscape", "md-stay-current-portrait", "md-stay-primary-landscape",
      "md-stay-primary-portrait", "md-swap-calls", "md-textsms", "md-voicemail", "md-vpn-key", "md-add", "md-add-box",
      "md-add-circle", "md-add-circle-outline", "md-archive", "md-backspace", "md-block", "md-clear", "md-content-copy",
      "md-content-cut", "md-content-paste", "md-create", "md-drafts", "md-filter-list", "md-flag", "md-forward",
      "md-gesture", "md-inbox", "md-link", "md-mail", "md-markunread", "md-redo", "md-remove", "md-remove-circle",
      "md-remove-circle-outline", "md-reply", "md-reply-all", "md-report", "md-save", "md-select-all", "md-send",
      "md-sort", "md-text-format", "md-undo", "md-access-alarm", "md-access-alarms", "md-access-time", "md-add-alarm",
      "md-airplanemode-off", "md-airplanemode-on", "md-battery-20", "md-battery-30", "md-battery-50", "md-battery-60",
      "md-battery-80", "md-battery-90", "md-battery-alert", "md-battery-charging-20", "md-battery-charging-30",
      "md-battery-charging-50", "md-battery-charging-60", "md-battery-charging-80", "md-battery-charging-90",
      "md-battery-charging-full", "md-battery-full", "md-battery-std", "md-battery-unknown", "md-bluetooth",
      "md-bluetooth-connected", "md-bluetooth-disabled", "md-bluetooth-searching", "md-brightness-auto", "md-brightness-high",
      "md-brightness-low", "md-brightness-medium", "md-data-usage", "md-developer-mode", "md-devices", "md-dvr",
      "md-gps-fixed", "md-gps-not-fixed", "md-gps-off", "md-location-disabled", "md-location-searching",
      "md-multitrack-audio", "md-network-cell", "md-network-wifi", "md-nfc", "md-now-wallpaper", "md-now-widgets",
      "md-screen-lock-landscape", "md-screen-lock-portrait", "md-screen-lock-rotation", "md-screen-rotation", "md-sd-storage",
      "md-settings-system-daydream", "md-signal-cellular-0-bar", "md-signal-cellular-1-bar", "md-signal-cellular-2-bar",
      "md-signal-cellular-3-bar", "md-signal-cellular-4-bar", "md-signal-cellular-connected-no-internet-0-bar",
      "md-signal-cellular-connected-no-internet-1-bar", "md-signal-cellular-connected-no-internet-2-bar",
      "md-signal-cellular-connected-no-internet-3-bar", "md-signal-cellular-connected-no-internet-4-bar",
      "md-signal-cellular-no-sim", "md-signal-cellular-null", "md-signal-cellular-off", "md-signal-wifi-0-bar",
      "md-signal-wifi-1-bar", "md-signal-wifi-2-bar", "md-signal-wifi-3-bar", "md-signal-wifi-4-bar", "md-signal-wifi-off",
      "md-storage", "md-usb", "md-wifi-lock", "md-wifi-tethering", "md-attach-file", "md-attach-money", "md-border-all",
      "md-border-bottom", "md-border-clear", "md-border-color", "md-border-horizontal", "md-border-inner", "md-border-left",
      "md-border-outer", "md-border-right", "md-border-style", "md-border-top", "md-border-vertical", "md-format-align-center",
      "md-format-align-justify", "md-format-align-left", "md-format-align-right", "md-format-bold", "md-format-clear",
      "md-format-color-fill", "md-format-color-reset", "md-format-color-text", "md-format-indent-decrease",
      "md-format-indent-increase", "md-format-italic", "md-format-line-spacing", "md-format-list-bulleted",
      "md-format-list-numbered", "md-format-paint", "md-format-quote", "md-format-size", "md-format-strikethrough",
      "md-format-textdirection-l-to-r", "md-format-textdirection-r-to-l", "md-format-underline", "md-functions",
      "md-insert-chart", "md-insert-comment", "md-insert-drive-file", "md-insert-emoticon", "md-insert-invitation",
      "md-insert-link", "md-insert-photo", "md-merge-type", "md-mode-comment", "md-mode-edit", "md-publish",
      "md-vertical-align-bottom", "md-vertical-align-center", "md-vertical-align-top", "md-wrap-text", "md-attachment",
      "md-cloud", "md-cloud-circle", "md-cloud-done", "md-cloud-download", "md-cloud-off", "md-cloud-queue",
      "md-cloud-upload", "md-file-download", "md-file-upload", "md-folder", "md-folder-open", "md-folder-shared",
      "md-cast", "md-cast-connected", "md-computer", "md-desktop-mac", "md-desktop-windows", "md-dock", "md-gamepad",
      "md-headset", "md-headset-mic", "md-keyboard", "md-keyboard-alt", "md-keyboard-arrow-down", "md-keyboard-arrow-left",
      "md-keyboard-arrow-right", "md-keyboard-arrow-up", "md-keyboard-backspace", "md-keyboard-capslock",
      "md-keyboard-control", "md-keyboard-hide", "md-keyboard-return", "md-keyboard-tab", "md-keyboard-voice",
      "md-laptop", "md-laptop-chromebook", "md-laptop-mac", "md-laptop-windows", "md-memory", "md-mouse",
      "md-phone-android", "md-phone-iphone", "md-phonelink", "md-phonelink-off", "md-security", "md-sim-card",
      "md-smartphone", "md-speaker", "md-tablet", "md-tablet-android", "md-tablet-mac", "md-tv", "md-watch",
      "md-add-to-photos", "md-adjust", "md-assistant-photo", "md-audiotrack", "md-blur-circular", "md-blur-linear",
      "md-blur-off", "md-blur-on", "md-brightness-1", "md-brightness-2", "md-brightness-3", "md-brightness-4",
      "md-brightness-5", "md-brightness-6", "md-brightness-7", "md-brush", "md-camera", "md-camera-alt", "md-camera-front",
      "md-camera-rear", "md-camera-roll", "md-center-focus-strong", "md-center-focus-weak", "md-collections", "md-colorize",
      "md-color-lens", "md-compare", "md-control-point", "md-control-point-duplicate", "md-crop", "md-crop-3-2", "md-crop-5-4",
      "md-crop-7-5", "md-crop-16-9", "md-crop-din", "md-crop-free", "md-crop-landscape", "md-crop-original", "md-crop-portrait",
      "md-crop-square", "md-dehaze", "md-details", "md-edit", "md-exposure", "md-exposure-minus-1", "md-exposure-minus-2",
      "md-exposure-zero", "md-exposure-plus-1", "md-exposure-plus-2", "md-filter", "md-filter-1", "md-filter-2", "md-filter-3",
      "md-filter-4", "md-filter-5", "md-filter-6", "md-filter-7", "md-filter-8", "md-filter-9", "md-filter-9-plus", "md-filter-b-and-w",
      "md-filter-center-focus", "md-filter-drama", "md-filter-frames", "md-filter-hdr", "md-filter-none", "md-filter-tilt-shift",
      "md-filter-vintage", "md-flare", "md-flash-auto", "md-flash-off", "md-flash-on", "md-flip", "md-gradient", "md-grain",
      "md-grid-off", "md-grid-on", "md-hdr-off", "md-hdr-on", "md-hdr-strong", "md-hdr-weak", "md-healing", "md-image",
      "md-image-aspect-ratio", "md-iso", "md-landscape", "md-leak-add", "md-leak-remove", "md-lens", "md-looks", "md-looks-1",
      "md-looks-2", "md-looks-3", "md-looks-4", "md-looks-5", "md-looks-6", "md-loupe", "md-movie-creation", "md-nature",
      "md-nature-people", "md-navigate-before", "md-navigate-next", "md-palette", "md-panorama", "md-panorama-fisheye",
      "md-panorama-horizontal", "md-panorama-vertical", "md-panorama-wide-angle", "md-photo", "md-photo-album", "md-photo-camera",
      "md-photo-library", "md-portrait", "md-remove-red-eye", "md-rotate-left", "md-rotate-right", "md-slideshow", "md-straighten",
      "md-style", "md-switch-camera", "md-switch-video", "md-tag-faces", "md-texture", "md-timelapse", "md-timer", "md-timer-3",
      "md-timer-10", "md-timer-auto", "md-timer-off", "md-tonality", "md-transform", "md-tune", "md-wb-auto", "md-wb-cloudy",
      "md-wb-incandescent", "md-wb-irradescent", "md-wb-sunny", "md-beenhere", "md-directions", "md-directions-bike",
      "md-directions-bus", "md-directions-car", "md-directions-ferry", "md-directions-subway", "md-directions-train",
      "md-directions-transit", "md-directions-walk", "md-flight", "md-hotel", "md-layers", "md-layers-clear", "md-local-airport",
      "md-local-atm", "md-local-attraction", "md-local-bar", "md-local-cafe", "md-local-car-wash", "md-local-convenience-store",
      "md-local-drink", "md-local-florist", "md-local-gas-station", "md-local-grocery-store", "md-local-hospital", "md-local-hotel",
      "md-local-laundry-service", "md-local-library", "md-local-mall", "md-local-movies", "md-local-offer", "md-local-parking",
      "md-local-pharmacy", "md-local-phone", "md-local-pizza", "md-local-play", "md-local-post-office", "md-local-print-shop",
      "md-local-restaurant", "md-local-see", "md-local-shipping", "md-local-taxi", "md-location-history", "md-map",
      "md-my-location", "md-navigation", "md-pin-drop", "md-place", "md-rate-review", "md-restaurant-menu", "md-satellite",
      "md-store-mall-directory", "md-terrain", "md-traffic", "md-apps", "md-cancel", "md-arrow-drop-down-circle",
      "md-arrow-drop-down", "md-arrow-drop-up", "md-arrow-back", "md-arrow-forward", "md-check", "md-close", "md-chevron-left",
      "md-chevron-right", "md-expand-less", "md-expand-more", "md-fullscreen", "md-fullscreen-exit", "md-menu", "md-more-horiz",
      "md-more-vert", "md-refresh", "md-unfold-less", "md-unfold-more", "md-adb", "md-bluetooth-audio", "md-disc-full",
      "md-dnd-forwardslash", "md-do-not-disturb", "md-drive-eta", "md-event-available", "md-event-busy", "md-event-note",
      "md-folder-special", "md-mms", "md-more", "md-network-locked", "md-phone-bluetooth-speaker", "md-phone-forwarded",
      "md-phone-in-talk", "md-phone-locked", "md-phone-missed", "md-phone-paused", "md-play-download", "md-play-install",
      "md-sd-card", "md-sim-card-alert", "md-sms", "md-sms-failed", "md-sync", "md-sync-disabled", "md-sync-problem",
      "md-system-update", "md-tap-and-play", "md-time-to-leave", "md-vibration", "md-voice-chat", "md-vpn-lock", "md-cake",
      "md-domain", "md-location-city", "md-mood", "md-notifications-none", "md-notifications", "md-notifications-off",
      "md-notifications-on", "md-notifications-paused", "md-pages", "md-party-mode", "md-group", "md-group-add", "md-people",
      "md-people-outline", "md-person", "md-person-add", "md-person-outline", "md-plus-one", "md-poll", "md-public", "md-school",
      "md-share", "md-whatshot", "md-check-box", "md-check-box-outline-blank", "md-radio-button-off", "md-radio-button-on",
      "md-star", "md-star-half", "md-star-outline", "md-home", "md-warning", "md-play-circle-fill", "md-forum",
      "md-content-paste", "md-battery-80", "md-format-textdirection-l-to-r", "md-folder-open", "md-desktop-windows",
      "md-collections", "md-directions-bike", "md-apps", "md-phone-in-talk", "md-people", "md-star-half"
    ];


    var img = [
      "ad.svg", "button.svg", "converse.svg", "fire extinguisher.svg", "lamp.svg", "passport.svg", "skate.svg",
      "theatre.svg", "turntable.svg", "wacom.svg", "bill.svg", "buzzer.svg","conveyor.svg", "helmet.svg", "luggage.svg",
      "presentation.svg","smart watch.svg", "tie.svg", "umbrella.svg", "workspace.svg", "bowling.svg", "calculator.svg",
      "demoltion.svg", "icecream.svg", "microscope.svg", "server.svg", "switcher.svg", "tower.svg", "vespa.svg", "wrench.svg"
    ];

    var colors = [
      "pink","red","purple","indigo","blue",
      "light-blue","cyan","teal","green","light-green",
      "lime","yellow","amber","orange","deep-orange"
    ];
    var colorVariation = [
      "lighten-2", "lighten-1",
      //"base",
      "darken-1", "darken-2",
      //"accent-1", "accent-2", "accent-3", "accent-4"
    ];



    function randomInt ( min, max ) {
      return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    return {

      createFirstname: function(){
        return name.first_name[randomInt(0, name.first_name.length - 1)];
      },

      createLastname: function(){
        return name.last_name[randomInt(0, name.last_name.length - 1)];
      },

      createIcon: function(color){
        color = color || false;

        if(!color){
          return '<i class="md '+icons[randomInt(0, icons.length - 1)]+'"></i>';
        }

        var c = colors[randomInt(0, colors.length-1)];
        var cv = colorVariation[randomInt(0, colorVariation.length-1)];

        return '<i class="md '+icons[randomInt(0, icons.length - 1)]+' '+c+' '+cv+' icon-color"></i>';
      },

      createImg: function(){
        return img[randomInt(0, img.length - 1)];
      },

      createName: function(){
        return this.createFirstname()+' '+this.createLastname();
      },

      createSentence: function ( sentenceLength ) {
        var wordIndex,
          sentence;

        // Determine how long the sentence should be. Do it randomly if one was not
        // provided.
        sentenceLength = sentenceLength || randomInt( 5, 20 );

        // Now we determine were we are going to start in the array randomly. We
        // are just going to take a slice of the array, so we have to ensure
        // whereever we start has enough places left in the array to accommodate
        // the random sentence length from above.
        wordIndex = randomInt(0, words.length - sentenceLength - 1);

        // And pull out the words, join them together, separating words by spaces
        // (duh), and removing any commas that may appear at the end of the
        // sentence. Finally, add a period.
        sentence = words.slice(wordIndex, wordIndex + sentenceLength)
          .join(' ')
          .replace(/\,$/g, '') + '.';

        // Capitalize the first letter - it is a sentence, after all.
        sentence = sentence.charAt(0).toUpperCase() + sentence.slice(1);

        return sentence;
      },
      createSentences: function ( numSentences ) {
        var sentences = [],
          i = 0;

        // Determine how many sentences we should do. Do it randomly if one was not
        // provided.
        numSentences = numSentences || randomInt( 3, 5 );

        // For each paragraph, we should generate between 3 and 5 sentences.
        for ( i = 0; i < numSentences; i++ ) {
          sentences.push( this.createSentence() );
        }

        // And then we just return the array of sentences, concatenated with spaces.
        return sentences.join( ' ' );
      },
      createParagraph: function ( numSentences, html ) {
        var sentences = this.createSentences( numSentences );

        // Make the sentences into a paragraph and return.
        if(html){
          return "<p>" + sentences + "</p>";
        }

        return sentences + "\n";
      },
      createParagraphs: function ( numParagraphs, numSentences, html ) {
        var paragraphs = [],
          i = 0;

        numParagraphs = numParagraphs || randomInt( 3, 7 );

        // Create the number of paragraphs requested.
        for ( i = 0; i < numParagraphs; i++ ) {
          paragraphs.push( this.createParagraph( numSentences, html ) );
        }

        // Return the paragraphs, concatenated with newlines.
        return paragraphs.join( '\n' );
      }
    };
  })

  .directive( 'placeholderText', [ 'PlaceholderTextService', function ( PlaceholderTextService ) {
    return {
      restrict: 'A',
      link: function(scope, element, attrs, ngModel) {

        numParagraphs = attrs.sentences || 1;
        numSentences = attrs.paragraphs || 6;
        html = attrs.html || true;

        element.html(
          PlaceholderTextService.createParagraphs(numParagraphs, numSentences, true)
        );

      }
    };
  }])

  .directive( 'placeholderTitle', [ 'PlaceholderTextService', function ( PlaceholderTextService ) {
    return {
      restrict: 'A',
      link: function(scope, element, attrs) {
        element.html(
          PlaceholderTextService.createSentence(5)
        );
      }
    };
  }])

  .directive( 'placeholderName', [ 'PlaceholderTextService', function ( PlaceholderTextService ) {
    return {
      restrict: 'A',
      link: function(scope, element, attrs, ngModel) {
        element.html(
          PlaceholderTextService.createName()
        );
      }
    };
  }])

  .directive( 'placeholderP', [ 'PlaceholderTextService', function ( PlaceholderTextService ) {
    return {
      restrict: 'A',
      link: function(scope, element, attrs, ngModel) {
        element.html(
          PlaceholderTextService.createParagraph(1, 3, false)
        );
      }
    };
  }])

  .directive( 'placeholderImg', [ 'PlaceholderTextService', function ( PlaceholderTextService ) {
    return {
      restrict: 'A',
      link: function(scope, element, attrs, ngModel) {
        element.attr('src', 'assets/img/icons/ballicons/'+PlaceholderTextService.createImg());
      }
    };
  }])

  .directive( 'placeholderIcon', [ 'PlaceholderTextService', function ( PlaceholderTextService ) {
    return {
      restrict: 'A',
      link: function(scope, element, attrs, ngModel) {
        element.html(
          PlaceholderTextService.createIcon(false)
        );
      }
    };
  }])

  .directive( 'placeholderForm', [ 'PlaceholderTextService', function ( PlaceholderTextService ) {
    return {
      restrict: 'C',
      link: function(scope, element, attrs, ngModel) {

        angular.forEach(element.find('input, textarea'), function(el){
          elem = angular.element(el);

          switch (el.type) {
            case 'textarea':
              elem.text(PlaceholderTextService.createParagraphs(1, 4));
              break;
            case 'text':
              elem.attr('value', PlaceholderTextService.createSentence());
              break;
            case 'password':
              elem.attr('value', 'nakama?');
              break;
            case 'checkbox':
              elem.attr('checked','checked');
              break;
          }

          if(elem.val()){
            elem.parent().addClass('filled');
          }
        });

      }
    };
  }])


  .directive( 'placeholderImage', function () {
    return {
      restrict: 'A',
      scope: { dimensions: '@placeholderImage' },
      link: function( scope, element, attr ) {

        // A reference to a canvas that we can reuse
        var canvas;
        var config = {
          text_size: 10,
          fill_color: '#EEEEEE',
          text_color: '#AAAAAA'
        };

        /**
         * When the provided dimensions change, re-pull the width and height and
         * then redraw the image.
         */
        scope.$watch('dimensions', function () {
          if( ! angular.isDefined( scope.dimensions ) ) {
            return;
          }
          var matches = scope.dimensions.match( /^(\d+)x(\d+)$/ ),
            dataUrl;

          if(  ! matches ) {
            console.error("Expected '000x000'. Got " + scope.dimensions);
            return;
          }

          // Grab the provided dimensions.
          scope.size = { w: matches[1], h: matches[2] };

          // FIXME: only add these if not already present
          element.prop( "title", scope.dimensions );
          element.prop( "alt", scope.dimensions );

          // And draw the image, getting the returned data URL.
          dataUrl = drawImage();

          // If this is an `img` tag, set the src as the data URL. Else, we set
          // the CSS `background-image` property to same.
          if ( element.prop( "tagName" ) === "IMG" ) {
            element.prop( 'src', dataUrl );
          } else {
            element.css( 'background-image', 'url("' + dataUrl + '")' );
          }
        });

        /**
         * Calculate the maximum height of the text we can draw, based on the
         * requested dimensions of the image.
         */
        function getTextSize() {
          var dimension_arr = [scope.size.h, scope.size.w].sort(),
            maxFactor = Math.round(dimension_arr[1] / 16);

          return Math.max(config.text_size, maxFactor);
        }

        /**
         * Using the HTML5 canvas API, draw a placeholder image of the requested
         * size with text centered vertically and horizontally that specifies its
         * dimensions. Returns the data URL that can be used as an `img`'s `src`
         * attribute.
         */
        function drawImage() {
          // Create a new canvas if we don't already have one. We reuse the canvas
          // when if gets redrawn so as not to be wasteful.
          canvas = canvas || document.createElement( 'canvas' );

          // Obtain a 2d drawing context on which we can add the placeholder
          // image.
          var context = canvas.getContext( '2d' ),
            text_size,
            text;

          // Set the canvas to the appropriate size.
          canvas.width = scope.size.w;
          canvas.height = scope.size.h;

          // Draw the placeholder image square.
          // TODO: support other shapes
          // TODO: support configurable colors
          context.fillStyle = config.fill_color;
          context.fillRect( 0, 0, scope.size.w, scope.size.h );

          // Add the dimension text.
          // TODO: support configurable font
          // FIXME: ensure text will fit and resize if it doesn't
          text_size = getTextSize();
          text = scope.dimensions;
          context.fillStyle = config.text_color;
          context.textAlign = 'center';
          context.textBaseline = 'middle';
          context.font = 'bold '+text_size+'pt sans-serif';

          // If the text is too long to fit, reduce it until it will.
          if (context.measureText( text ).width / scope.size.w > 1) {
            text_size = config.text_size / (context.measureText( text ).width / scope.size.w);
            context.font = 'bold '+text_size+'pt sans-serif';
          }

          // Finally, draw the text in its calculated position.
          context.fillText( scope.dimensions, scope.size.w / 2, scope.size.h / 2 );

          // Get the data URL and return it.
          return canvas.toDataURL("image/png");
        }
      }
    };
  });
(function ($) {
    // left: 37, up: 38, right: 39, down: 40,
    // spacebar: 32, pageup: 33, pagedown: 34, end: 35, home: 36
    // var keys = [32, 33, 34, 35, 36, 37, 38, 39, 40];

    // function preventDefault(e) {
    //   e = e || window.event;
    //   if (e.preventDefault)
    //     e.preventDefault();
    //   e.returnValue = false;
    // }

    // function keydown(e) {
    //   for (var i = keys.length; i--;) {
    //     if (e.keyCode === keys[i]) {
    //       preventDefault(e);
    //       return;
    //     }
    //   }
    // }

    // function wheel(e) {
    //   preventDefault(e);
    // }

    // function disable_scroll() {
    //   if (window.addEventListener) {
    //     window.addEventListener('DOMMouseScroll', wheel, false);
    //   }
    //   window.onmousewheel = document.onmousewheel = wheel;
    //   document.onkeydown = keydown;
    //   $('body').css({'overflow-y' : 'hidden'});
    // }

    // function enable_scroll() {
    //   if (window.removeEventListener) {
    //     window.removeEventListener('DOMMouseScroll', wheel, false);
    //   }
    //   window.onmousewheel = document.onmousewheel = document.onkeydown = null;
    //   $('body').css({'overflow-y' : ''});

    // }

  var methods = {
    init : function(options) {
      var defaults = {
        menuWidth: 250,
        edge: 'left',
        closeOnClick: false
      };
      options = $.extend(defaults, options);

      $(this).each(function(){
        var $this = $(this);
        var menu_id = $($this.attr('data-activates'));


        // Set to width
        if (options.menuWidth != 250) {
          menu_id.css('width', options.menuWidth);
        }

        // Add Touch Area
        $('body').append($('<div class="drag-target"></div>'));

        if (options.edge == 'left') {
          menu_id.css('left', -1 * (options.menuWidth + 10));
          $('.drag-target').css({'left': 0}); // Add Touch Area
        }
        else {
          menu_id.addClass('right-aligned') // Change text-alignment to right
            .css('right', -1 * (options.menuWidth + 10))
            .css('left', '');
          $('.drag-target').css({'right': 0}); // Add Touch Area
        }

        // If fixed sidenav, bring menu out
        if (menu_id.hasClass('fixed')) {
            if ($(window).width() > 992) {
              menu_id.css('left', 0);
            }
        }

        if (window.innerWidth > 992) {
          menuOut = true;
        }

        // Window resize to reset on large screens fixed
        if (menu_id.hasClass('fixed')) {
          $(window).resize( function() {
            if (window.innerWidth > 992) {
              // Close menu if window is resized bigger than 992 and user has fixed sidenav
              if ($('#sidenav-overlay').css('opacity') !== 0 && menuOut) {
                removeMenu(true);
              }
              else {
                menu_id.removeAttr('style');
                menu_id.css('width', options.menuWidth);
              }
            }
            else if (menuOut === false){
              if (options.edge === 'left')
                menu_id.css('left', -1 * (options.menuWidth + 10));
              else
                menu_id.css('right', -1 * (options.menuWidth + 10));
            }

          });
        }

        // if closeOnClick, then add close event for all a tags in side sideNav
        if (options.closeOnClick === true) {
          menu_id.on("click.itemclick", "a:not(.collapsible-header)", function(){
            if (menuOut === true) {
              removeMenu();
            }
          });
        }

        function removeMenu(restoreNav) {
          panning = false;
          menuOut = false;
          $('body').removeClass('overflow-no');
          $('#sidenav-overlay').velocity({opacity: 0}, {duration: 200, queue: false, easing: 'easeOutQuad',
            complete: function() {
              $(this).remove();
            } });
          if (options.edge === 'left') {
            // Reset phantom div
            $('.drag-target').css({width: '', right: '', left: '0'});
            menu_id.velocity(
              {left: -1 * (options.menuWidth + 10)},
              { duration: 200,
                queue: false,
                easing: 'easeOutCubic',
                complete: function() {
                  if (restoreNav === true) {
                    // Restore Fixed sidenav
                    menu_id.removeAttr('style');
                    menu_id.css('width', options.menuWidth);
                  }
                }

            });
          }
          else {
            // Reset phantom div
            $('.drag-target').css({width: '', right: '0', left: ''});
            menu_id.velocity(
              {right: -1 * (options.menuWidth + 10)},
              { duration: 200,
                queue: false,
                easing: 'easeOutCubic',
                complete: function() {
                  if (restoreNav === true) {
                    // Restore Fixed sidenav
                    menu_id.removeAttr('style');
                    menu_id.css('width', options.menuWidth);
                  }
                }
              });
          }
        }



        // Touch Event
        var panning = false;
        var menuOut = false;

        $('.drag-target').on('click', function(){
          removeMenu();
        });

        $('.drag-target').hammer({
          prevent_default: false
        }).bind('pan', function(e) {

          if (e.gesture.pointerType == "touch") {

            var direction = e.gesture.direction;
            var x = e.gesture.center.x;
            var y = e.gesture.center.y;
            var velocityX = e.gesture.velocityX;

            // If overlay does not exist, create one and if it is clicked, close menu
            if ($('#sidenav-overlay').length === 0) {
              var overlay = $('<div id="sidenav-overlay"></div>');
              overlay.css('opacity', 0).click( function(){
                removeMenu();
              });
              $('body').append(overlay);
            }

            // Keep within boundaries
            if (options.edge === 'left') {
              if (x > options.menuWidth) { x = options.menuWidth; }
              else if (x < 0) { x = 0; }
            }

            if (options.edge === 'left') {
              // Left Direction
              if (x < (options.menuWidth / 2)) { menuOut = false; }
              // Right Direction
              else if (x >= (options.menuWidth / 2)) { menuOut = true; }

              menu_id.css('left', (x - options.menuWidth));
            }
            else {
              // Left Direction
              if (x < ($(window).width() - options.menuWidth / 2)) {
                menuOut = true;
              }
              // Right Direction
              else if (x >= ($(window).width() - options.menuWidth / 2)) {
               menuOut = false;
             }
              var rightPos = -1 *(x - options.menuWidth / 2);
              if (rightPos > 0) {
                rightPos = 0;
              }

              menu_id.css('right', rightPos);
            }




            // Percentage overlay
            if (options.edge === 'left') {
              overlayPerc = x / options.menuWidth;
              $('#sidenav-overlay').velocity({opacity: overlayPerc }, {duration: 50, queue: false, easing: 'easeOutQuad'});
            }
            else {
              overlayPerc = Math.abs((x - $(window).width()) / options.menuWidth);
              $('#sidenav-overlay').velocity({opacity: overlayPerc }, {duration: 50, queue: false, easing: 'easeOutQuad'});
            }
          }

        }).bind('panend', function(e) {
          if (e.gesture.pointerType == "touch") {
            var velocityX = e.gesture.velocityX;
            panning = false;
            if (options.edge === 'left') {
              // If velocityX <= 0.3 then the user is flinging the menu closed so ignore menuOut
              if ((menuOut && velocityX <= 0.3) || velocityX < -0.5) {
                menu_id.velocity({left: 0}, {duration: 300, queue: false, easing: 'easeOutQuad'});
                $('#sidenav-overlay').velocity({opacity: 1 }, {duration: 50, queue: false, easing: 'easeOutQuad'});
                $('.drag-target').css({width: '50%', right: 0, left: ''});
              }
              else if (!menuOut || velocityX > 0.3) {
                menu_id.velocity({left: -1 * (options.menuWidth + 10)}, {duration: 200, queue: false, easing: 'easeOutQuad'});
                $('#sidenav-overlay').velocity({opacity: 0 }, {duration: 200, queue: false, easing: 'easeOutQuad',
                  complete: function () {
                    $(this).remove();
                  }});
                $('.drag-target').css({width: '10px', right: '', left: 0});
              }
            }
            else {
              if ((menuOut && velocityX >= -0.3) || velocityX > 0.5) {
                menu_id.velocity({right: 0}, {duration: 300, queue: false, easing: 'easeOutQuad'});
                $('#sidenav-overlay').velocity({opacity: 1 }, {duration: 50, queue: false, easing: 'easeOutQuad'});
                $('.drag-target').css({width: '50%', right: '', left: 0});
              }
              else if (!menuOut || velocityX < -0.3) {
                menu_id.velocity({right: -1 * (options.menuWidth + 10)}, {duration: 200, queue: false, easing: 'easeOutQuad'});
                $('#sidenav-overlay').velocity({opacity: 0 }, {duration: 200, queue: false, easing: 'easeOutQuad',
                  complete: function () {
                    $(this).remove();
                  }});
                $('.drag-target').css({width: '10px', right: 0, left: ''});
              }
            }

            $('body').addClass('overflow-no');

          }
        });

          $this.click(function() {
            if (menuOut === true) {
              menuOut = false;
              panning = false;
              removeMenu();
            }
            else {

              $('body').addClass('overflow-no');

              if (options.edge === 'left') {
                $('.drag-target').css({width: '50%', right: 0, left: ''});
                menu_id.velocity({left: 0}, {duration: 300, queue: false, easing: 'easeOutQuad'});
              }
              else {
                $('.drag-target').css({width: '50%', right: '', left: 0});
                menu_id.velocity({right: 0}, {duration: 300, queue: false, easing: 'easeOutQuad'});
                menu_id.css('left','');
              }

              var overlay = $('<div id="sidenav-overlay"></div>');
              overlay.css('opacity', 0)
              .click(function(){
                menuOut = false;
                panning = false;
                removeMenu();
                overlay.velocity({opacity: 0}, {duration: 300, queue: false, easing: 'easeOutQuad',
                  complete: function() {
                    $(this).remove();
                  } });

              });
              $('body').append(overlay);
              overlay.velocity({opacity: 1}, {duration: 300, queue: false, easing: 'easeOutQuad',
                complete: function () {
                  menuOut = true;
                  panning = false;
                }
              });
            }

            return false;
          });
      });


    },
    show : function() {
      this.trigger('click');
    },
    hide : function() {
      $('#sidenav-overlay').trigger('click');
    }
  };


    $.fn.sideNav = function(methodOrOptions) {
      if ( methods[methodOrOptions] ) {
        return methods[ methodOrOptions ].apply( this, Array.prototype.slice.call( arguments, 1 ));
      } else if ( typeof methodOrOptions === 'object' || ! methodOrOptions ) {
        // Default to "init"
        return methods.init.apply( this, arguments );
      } else {
        $.error( 'Method ' +  methodOrOptions + ' does not exist on jQuery.tooltip' );
      }
    }; // PLugin end
}( jQuery ));
/* Copyright 2014+, Federico Zivolo, LICENSE at https://github.com/FezVrasta/bootstrap-material-design/blob/master/LICENSE.md */
/* globals jQuery, navigator */

(function($, window, document, undefined) {

  "use strict";

  /**
   * Define the name of the plugin
   */
  var ripples = "ripples";


  /**
   * Get an instance of the plugin
   */
  var self = null;


  /**
   * Define the defaults of the plugin
   */
  var defaults = {};


  /**
   * Create the main plugin function
   */
  function Ripples(element, options) {
    self = this;

    this.element = $(element);

    this.options = $.extend({}, defaults, options);

    this._defaults = defaults;
    this._name = ripples;

    this.init();
  }


  /**
   * Initialize the plugin
   */
  Ripples.prototype.init = function() {
    var $element  = this.element;

    $element.on("mousedown touchstart", function(event) {
      /**
       * Verify if the user is just touching on a device and return if so
       */
      if(self.isTouch() && event.type === "mousedown") {
        return;
      }


      /**
       * Verify if the current element already has a ripple wrapper element and
       * creates if it doesn't
       */
      if(!($element.find(".ripple-wrapper").length)) {
        $element.append("<div class=\"ripple-wrapper\"></div>");
      }


      /**
       * Find the ripple wrapper
       */
      var $wrapper = $element.children(".ripple-wrapper");


      /**
       * Get relY and relX positions
       */
      var relY = self.getRelY($wrapper, event);
      var relX = self.getRelX($wrapper, event);


      /**
       * If relY and/or relX are false, return the event
       */
      if(!relY && !relX) {
        return;
      }


      /**
       * Get the ripple color
       */
      var rippleColor = self.getRipplesColor($element);


      /**
       * Create the ripple element
       */
      var $ripple = $("<div></div>");

      $ripple
      .addClass("ripple")
      .css({
        "left": relX,
        "top": relY,
        "background-color": rippleColor
      });


      /**
       * Append the ripple to the wrapper
       */
      $wrapper.append($ripple);


      /**
       * Make sure the ripple has the styles applied (ugly hack but it works)
       */
      (function() { return window.getComputedStyle($ripple[0]).opacity; })();


      /**
       * Turn on the ripple animation
       */
      self.rippleOn($element, $ripple);


      /**
       * Call the rippleEnd function when the transition "on" ends
       */
      setTimeout(function() {
        self.rippleEnd($ripple);
      }, 500);


      /**
       * Detect when the user leaves the element
       */
      $element.on("mouseup mouseleave touchend", function() {
        $ripple.data("mousedown", "off");

        if($ripple.data("animating") === "off") {
          self.rippleOut($ripple);
        }
      });

    });
  };


  /**
   * Get the new size based on the element height/width and the ripple width
   */
  Ripples.prototype.getNewSize = function($element, $ripple) {

    return (Math.max($element.outerWidth(), $element.outerHeight()) / $ripple.outerWidth()) * 2.5;
  };


  /**
   * Get the relX
   */
  Ripples.prototype.getRelX = function($wrapper,  event) {
    var wrapperOffset = $wrapper.offset();

    if(!self.isTouch()) {
      /**
       * Get the mouse position relative to the ripple wrapper
       */
      return event.pageX - wrapperOffset.left;
    } else {
      /**
       * Make sure the user is using only one finger and then get the touch
       * position relative to the ripple wrapper
       */
      event = event.originalEvent;

      if(event.touches.length !== 1) {
        return event.touches[0].pageX - wrapperOffset.left;
      }

      return false;
    }
  };


  /**
   * Get the relY
   */
  Ripples.prototype.getRelY = function($wrapper, event) {
    var wrapperOffset = $wrapper.offset();

    if(!self.isTouch()) {
      /**
       * Get the mouse position relative to the ripple wrapper
       */
      return event.pageY - wrapperOffset.top;
    } else {
      /**
       * Make sure the user is using only one finger and then get the touch
       * position relative to the ripple wrapper
       */
      event = event.originalEvent;

      if(event.touches.length !== 1) {
        return event.touches[0].pageY - wrapperOffset.top;
      }

      return false;
    }
  };


  /**
   * Get the ripple color
   */
  Ripples.prototype.getRipplesColor = function($element) {

    var color = $element.data("ripple-color") ? $element.data("ripple-color") : window.getComputedStyle($element[0]).color;

    return color;
  };


  /**
   * Verify if the client browser has transistion support
   */
  Ripples.prototype.hasTransitionSupport = function() {
    var thisBody  = document.body || document.documentElement;
    var thisStyle = thisBody.style;

    var support = (
      thisStyle.transition !== undefined ||
      thisStyle.WebkitTransition !== undefined ||
      thisStyle.MozTransition !== undefined ||
      thisStyle.MsTransition !== undefined ||
      thisStyle.OTransition !== undefined
    );

    return support;
  };


  /**
   * Verify if the client is using a mobile device
   */
  Ripples.prototype.isTouch = function() {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  };


  /**
   * End the animation of the ripple
   */
  Ripples.prototype.rippleEnd = function($ripple) {
    $ripple.data("animating", "off");

    if($ripple.data("mousedown") === "off") {
      self.rippleOut($ripple);
    }
  };


  /**
   * Turn off the ripple effect
   */
  Ripples.prototype.rippleOut = function($ripple) {
    $ripple.off();

    if(self.hasTransitionSupport()) {
      $ripple.addClass("ripple-out");
    } else {
      $ripple.animate({"opacity": 0}, 100, function() {
        $ripple.trigger("transitionend");
      });
    }

    $ripple.on("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd", function() {
      $ripple.remove();
    });
  };


  /**
   * Turn on the ripple effect
   */
  Ripples.prototype.rippleOn = function($element, $ripple) {
    var size = self.getNewSize($element, $ripple);

    if(self.hasTransitionSupport()) {
      $ripple
      .css({
        "-ms-transform": "scale(" + size + ")",
        "-moz-transform": "scale(" + size + ")",
        "-webkit-transform": "scale(" + size + ")",
        "transform": "scale(" + size + ")"
      })
      .addClass("ripple-on")
      .data("animating", "on")
      .data("mousedown", "on");
    } else {
      $ripple.animate({
        "width": Math.max($element.outerWidth(), $element.outerHeight()) * 2,
        "height": Math.max($element.outerWidth(), $element.outerHeight()) * 2,
        "margin-left": Math.max($element.outerWidth(), $element.outerHeight()) * (-1),
        "margin-top": Math.max($element.outerWidth(), $element.outerHeight()) * (-1),
        "opacity": 0.2
      }, 500, function() {
        $ripple.trigger("transitionend");
      });
    }
  };


  /**
   * Create the jquery plugin function
   */
  $.fn.ripples = function(options) {
    return this.each(function() {
      if(!$.data(this, "plugin_" + ripples)) {
        $.data(this, "plugin_" + ripples, new Ripples(this, options));
      }
    });
  };

})(jQuery, window, document);

/* jshint ignore:start */

var fsm = angular.module('fsm', []);

fsm.directive('fsmStickyHeader', function(){
    return {
        restrict: 'EA',
        replace: false,
        scope: {
            scrollBody: '=',
            scrollStop: '=',
            scrollableContainer: '='
        },
        link: function(scope, element, attributes, control){
            var header = $(element, this);
            var clonedHeader = null;
            var content = $(scope.scrollBody);
            var scrollableContainer = $(scope.scrollableContainer);

            if (scrollableContainer.length == 0){
                scrollableContainer = $(window);
            }

            function createClone(){
                /*
                 * switch place with cloned element, to keep binding intact
                 */
                clonedHeader = header;
                header = clonedHeader.clone();
                clonedHeader.after(header);
                clonedHeader.addClass('fsm-sticky-header');
                clonedHeader.css({
                    position: 'fixed',
                    'z-index': 1029,
                    visibility: 'hidden'
                });
                calculateSize();
            }

            function calculateSize() {
                clonedHeader.css({
                    top: scope.scrollStop,
                    width: header.outerWidth(),
                    left: header.offset().left
                });

                setColumnHeaderSizes();
            };

            function setColumnHeaderSizes() {
                if (clonedHeader.is('tr')) {
                    var clonedColumns = clonedHeader.find('th');
                    header.find('th').each(function (index, column) {
                        var clonedColumn = $(clonedColumns[index]);
                        clonedColumn.css( 'width', column.offsetWidth + 'px');
                    });
                }
            }

            function determineVisibility(){
                var scrollTop = scrollableContainer.scrollTop() + scope.scrollStop;
                var contentTop = content.offset().top;
                var contentBottom = contentTop + content.outerHeight(false);

                if ( (scrollTop > contentTop) && (scrollTop < contentBottom) ) {
                    if (!clonedHeader){
                        createClone();
                        clonedHeader.css({ "visibility": "visible"});
                    }

                    if ( scrollTop < contentBottom && scrollTop > contentBottom - clonedHeader.outerHeight(false) ){
                        var top = contentBottom - scrollTop + scope.scrollStop - clonedHeader.outerHeight(false);
                        clonedHeader.css('top', top + 'px');
                    } else {
                        calculateSize();
                    }
                } else {
                    if (clonedHeader){
                        /*
                         * remove cloned element (switched places with original on creation)
                         */
                        header.remove();
                        header = clonedHeader;
                        clonedHeader = null;

                        header.removeClass('fsm-sticky-header');
                        header.css({
                            position: 'relative',
                            left: 0,
                            top: 0,
                            width: 'auto',
                            'z-index': 0,
                            visibility: 'visible'
                        });
                    }
                };
            };

            scrollableContainer.scroll(determineVisibility).trigger( "scroll" );
            scrollableContainer.resize(determineVisibility);
        }
    }
});

fsm.directive('fsmMenuButton', function(){
    return {
        restrict: 'EA',
        replace: false,
        scope: { },
        link: function(scope, element, attributes, control){
            var menuButton = $(element, this);

            menuButton.addClass('fsm-menu-button');
            menuButton.click( menuOnClick );

            function menuOnClick() {
                $('body').toggleClass('fsm-menu-toggle');
                setMenuSpin();
                setTimeout(setMenuSpin, 50);
            };

            function setMenuSpin(){
                menuButton.find('.fsm-menu-button-open').toggleClass('fsm-spin-forward');
                menuButton.find('.fsm-menu-button-closed').toggleClass('fsm-spin-backward');
            };
        }
    }
});

fsm.directive('fsmBigData', ['$filter', function ($filter) {

    return {
        restrict: 'AE',
        scope: true,
        replace: false,
        transclude: true,
        link: function (scope, element, attrs, controller, transclude) {
            var orderBy = $filter('orderBy');
            var currentPage = 0;
            var pagedDataName = attrs.fsmBigData.split(' of ')[0];
            var rightHandExpression = attrs.fsmBigData.split(' of ')[1];
            var pageSize = parseInt(rightHandExpression.split(' take ')[1]);
            var sourceData = rightHandExpression.split(' take ')[0];

            // Interesting things can be done here with the source object...
            // var displayGetter = $parse(sourceData);
            // var displaySetter = displayGetter.assign;
            // var results = orderBy(displayGetter(scope.$parent), sortColumns);
            // displaySetter(scope.$parent, results)

            var rawData = [];
            var sortedData = [];
            var pagedData = [];
            var page = $(window);
            var sortTypes = [ 'None', 'Ascending', 'Descending' ];
            var sortColumns = [];

            scope.sortTypes = sortTypes;

            transclude(scope, function (clone, transcludedScope) {
                element.append(clone);
                transcludedScope[pagedDataName] = pagedData;

                function nextPage() {
                    var dataSlice = sortedData.slice(pageSize * currentPage, (pageSize * (currentPage + 1)));
                    if (dataSlice.length > 0) {
                        pagedData.push.apply(pagedData, dataSlice);
                        currentPage++;
                    }
                }

                function addSortColumn(columnName, sortType) {

                    // If this column is currently in the sort stack, remove it.
                    for (var i = 0; i < sortColumns.length; i ++){
                        if (sortColumns[i].indexOf(columnName) > -1) {
                            sortColumns.splice(i, 1);
                        }
                    }

                    // Push this sort on the top of the stack (aka. array)
                    if (sortType > 0) {
                        var direction = '';
                        if (sortTypes[sortType] === 'Descending'){
                            direction = '-'
                        }
                        sortColumns.unshift(direction + columnName);
                    }

                    renderData();
                }

                function renderData() {
                    if (sortColumns.length){
                        sortedData = orderBy(rawData, sortColumns);
                    }
                    else {
                        sortedData = rawData;
                    }

                    pagedData.length = 0;
                    currentPage = 0;
                    nextPage();
                }

                function onPageScroll() {
                    var s = $(window).scrollTop(),
                    d = $(document).height(),
                    c = $(window).height();
                    scrollPercent = (s / (d-c));

                    if (scrollPercent > 0.98) {
                        // We use scope.apply here to tell angular about these changes because
                        // they happen outside of angularjs context... we're using jquery here
                        // to figure out when we need to load another page of data.
                        transcludedScope.$apply(nextPage);
                    }
                }

                page.scroll(onPageScroll).trigger( 'scroll' );

                scope.$parent.$watchCollection(sourceData, function (newData) {
                    if (newData){
                        rawData = newData;
                        renderData();
                    }
                });

                scope.addSortColumn = addSortColumn;
            });
        }
    }
}]);

fsm.directive('fsmSort', function () {
    var sortIconTemplate = '<i class="md md-sort"></i>';

    return {
        restrict: 'A',
        replace: false,
        scope: {},
        link: function (scope, element, attrs) {
            var columnHeader = element;
            var columnName = attrs.fsmSort;
            var sortIcon = angular.element(sortIconTemplate);
            columnHeader.append('&nbsp;')
            columnHeader.append(sortIcon);
            var currentSortType = 0;

            function swapIcons(){
                sortIcon.removeClass('md-arrow-drop-down md-arrow-drop-up md-sort ');

                var classToAdd = 'md-sort';

                if (scope.$parent.sortTypes[currentSortType] === 'Ascending'){
                    classToAdd = 'md-arrow-drop-down';
                } else if(scope.$parent.sortTypes[currentSortType] === 'Descending') {
                    classToAdd = 'md-arrow-drop-up';
                }

                sortIcon.addClass(classToAdd);
            }

            columnHeader.css({ cursor: 'pointer' });
            columnHeader.bind('click', function() {
                // Find the kind of sort this should now be
                currentSortType ++;
                if (currentSortType == scope.$parent.sortTypes.length ){
                    currentSortType = 0;
                }

                scope.$apply( scope.$parent.addSortColumn(columnName, currentSortType) );

                swapIcons();
            });
        }
    }
});

/* =============================================================
/*
/*	 Angular Smooth Scroll 1.7.1
/*	 Animates scrolling to elements, by David Oliveros.
/*
/*   Callback hooks contributed by Ben Armston
/*   https://github.com/benarmston
/*
/*	 Easing support contributed by Willem Liu.
/*	 https://github.com/willemliu
/*
/*	 Easing functions forked from Gaëtan Renaudeau.
/*	 https://gist.github.com/gre/1650294
/*
/*	 Infinite loop bugs in iOS and Chrome (when zoomed) by Alex Guzman.
/*	 https://github.com/alexguzman
/*
/*	 Influenced by Chris Ferdinandi
/*	 https://github.com/cferdinandi
/*
/*
/*	 Free to use under the MIT License.
/*
/* ============================================================= */

(function () {
	'use strict';

	var module = angular.module('smoothScroll', []);


	// Smooth scrolls the window to the provided element.
	//
	var smoothScroll = function (element, options) {
		options = options || {};

		// Options
		var duration = options.duration || 800,
			offset = options.offset || 0,
			easing = options.easing || 'easeInOutQuart',
			callbackBefore = options.callbackBefore || function() {},
			callbackAfter = options.callbackAfter || function() {};

		var getScrollLocation = function() {
			return window.pageYOffset ? window.pageYOffset : document.documentElement.scrollTop;
		};

		setTimeout( function() {
			var startLocation = getScrollLocation(),
				timeLapsed = 0,
				percentage, position;

			// Calculate the easing pattern
			var easingPattern = function (type, time) {
				if ( type == 'easeInQuad' ) return time * time; // accelerating from zero velocity
				if ( type == 'easeOutQuad' ) return time * (2 - time); // decelerating to zero velocity
				if ( type == 'easeInOutQuad' ) return time < 0.5 ? 2 * time * time : -1 + (4 - 2 * time) * time; // acceleration until halfway, then deceleration
				if ( type == 'easeInCubic' ) return time * time * time; // accelerating from zero velocity
				if ( type == 'easeOutCubic' ) return (--time) * time * time + 1; // decelerating to zero velocity
				if ( type == 'easeInOutCubic' ) return time < 0.5 ? 4 * time * time * time : (time - 1) * (2 * time - 2) * (2 * time - 2) + 1; // acceleration until halfway, then deceleration
				if ( type == 'easeInQuart' ) return time * time * time * time; // accelerating from zero velocity
				if ( type == 'easeOutQuart' ) return 1 - (--time) * time * time * time; // decelerating to zero velocity
				if ( type == 'easeInOutQuart' ) return time < 0.5 ? 8 * time * time * time * time : 1 - 8 * (--time) * time * time * time; // acceleration until halfway, then deceleration
				if ( type == 'easeInQuint' ) return time * time * time * time * time; // accelerating from zero velocity
				if ( type == 'easeOutQuint' ) return 1 + (--time) * time * time * time * time; // decelerating to zero velocity
				if ( type == 'easeInOutQuint' ) return time < 0.5 ? 16 * time * time * time * time * time : 1 + 16 * (--time) * time * time * time * time; // acceleration until halfway, then deceleration
				return time; // no easing, no acceleration
			};


			// Calculate how far to scroll
			var getEndLocation = function (element) {
				var location = 0;
				if (element.offsetParent) {
					do {
						location += element.offsetTop;
						element = element.offsetParent;
					} while (element);
				}
				location = Math.max(location - offset, 0);
				return location;
			};

			var endLocation = getEndLocation(element);
			var distance = endLocation - startLocation;


			// Stop the scrolling animation when the anchor is reached (or at the top/bottom of the page)
			var stopAnimation = function () {
				var currentLocation = getScrollLocation();
				if ( position == endLocation || currentLocation == endLocation || ( (window.innerHeight + currentLocation) >= document.body.scrollHeight ) ) {
					clearInterval(runAnimation);
					callbackAfter(element);
				}
			};


			// Scroll the page by an increment, and check if it's time to stop
			var animateScroll = function () {
				timeLapsed += 16;
				percentage = ( timeLapsed / duration );
				percentage = ( percentage > 1 ) ? 1 : percentage;
				position = startLocation + ( distance * easingPattern(easing, percentage) );
				window.scrollTo( 0, position );
				stopAnimation();
			};


			// Init
			callbackBefore(element);
			var runAnimation = setInterval(animateScroll, 16);
		}, 0);
	};


	// Expose the library in a factory
	//
	module.factory('smoothScroll', function() {
		return smoothScroll;
	});


	// Scrolls the window to this element, optionally validating an expression
	//
	module.directive('smoothScroll', ['smoothScroll', function(smoothScroll) {
		return {
			restrict: 'A',
			scope: {
				callbackBefore: '&',
				callbackAfter: '&',
			},
			link: function($scope, $elem, $attrs) {
				if ( typeof $attrs.scrollIf === 'undefined' || $attrs.scrollIf === 'true' ) {
					setTimeout( function() {

						var callbackBefore = function(element) {
							if ( $attrs.callbackBefore ) {
								var exprHandler = $scope.callbackBefore({ element: element });
								if (typeof exprHandler === 'function') {
									exprHandler(element);
								}
							}
						};

						var callbackAfter = function(element) {
							if ( $attrs.callbackAfter ) {
								var exprHandler = $scope.callbackAfter({ element: element });
								if (typeof exprHandler === 'function') {
									exprHandler(element);
								}
							}
						};

						smoothScroll($elem[0], {
							duration: $attrs.duration,
							offset: $attrs.offset,
							easing: $attrs.easing,
							callbackBefore: callbackBefore,
							callbackAfter: callbackAfter
						});
					}, 0);
				}
			}
		};
	}]);


	// Scrolls to a specified element ID when this element is clicked
	//
	module.directive('scrollTo', ['smoothScroll', function(smoothScroll) {
		return {
			restrict: 'A',
			link: function($scope, $elem, $attrs) {
				var targetElement;

				$elem.on('click', function(e) {
					e.preventDefault();

					targetElement = document.getElementById($attrs.scrollTo);
					if ( !targetElement ) return;

					var callbackBefore = function(element) {
						if ( $attrs.callbackBefore ) {
							var exprHandler = $scope.callbackBefore({element: element});
							if (typeof exprHandler === 'function') {
								exprHandler(element);
							}
						}
					};

					var callbackAfter = function(element) {
						if ( $attrs.callbackAfter ) {
							var exprHandler = $scope.callbackAfter({element: element});
							if (typeof exprHandler === 'function') {
								exprHandler(element);
							}
						}
					};

					smoothScroll(targetElement, {
						duration: $attrs.duration,
						offset: $attrs.offset,
						easing: $attrs.easing,
						callbackBefore: callbackBefore,
						callbackAfter: callbackAfter
					});

					return false;
				});
			}
		};
	}]);

}());
var theme_colors = {
  "brand-primary": "blue",
  "brand-success": "green",
  "brand-info":    "purple",
  "brand-warning": "orange",
  "brand-danger":  "red",
  "theme": "pink",
  "theme-secondary": "blue"
};

var global_colors = {
  "red": {
    "lighten-5":  "#FFEBEE",
    "lighten-4":  "#FFCDD2",
    "lighten-3":  "#EF9A9A",
    "lighten-2":  "#E57373",
    "lighten-1":  "#EF5350",
    "base":       "#F44336",
    "darken-1":   "#E53935",
    "darken-2":   "#D32F2F",
    "darken-3":   "#C62828",
    "darken-4":   "#B71C1C",
    "accent-1":    "#FF8A80",
    "accent-2":    "#FF5252",
    "accent-3":    "#FF1744",
    "accent-4":    "#D50000"
  },
  "pink": {
    "lighten-5":  "#fce4ec",
    "lighten-4":  "#f8bbd0",
    "lighten-3":  "#f48fb1",
    "lighten-2":  "#f06292",
    "lighten-1":  "#ec407a",
    "base":       "#e91e63",
    "darken-1":   "#d81b60",
    "darken-2":   "#c2185b",
    "darken-3":   "#ad1457",
    "darken-4":   "#880e4f",
    "accent-1":    "#ff80ab",
    "accent-2":    "#ff4081",
    "accent-3":    "#f50057",
    "accent-4":    "#c51162"
  },
  "purple": {
    "lighten-5":  "#f3e5f5",
    "lighten-4":  "#e1bee7",
    "lighten-3":  "#ce93d8",
    "lighten-2":  "#ba68c8",
    "lighten-1":  "#ab47bc",
    "base":       "#9c27b0",
    "darken-1":   "#8e24aa",
    "darken-2":   "#7b1fa2",
    "darken-3":   "#6a1b9a",
    "darken-4":   "#4a148c",
    "accent-1":    "#ea80fc",
    "accent-2":    "#e040fb",
    "accent-3":    "#d500f9",
    "accent-4":    "#aa00ff"
  },
  "deep-purple": {
    "lighten-5":  "#ede7f6",
    "lighten-4":  "#d1c4e9",
    "lighten-3":  "#b39ddb",
    "lighten-2":  "#9575cd",
    "lighten-1":  "#7e57c2",
    "base":       "#673ab7",
    "darken-1":   "#5e35b1",
    "darken-2":   "#512da8",
    "darken-3":   "#4527a0",
    "darken-4":   "#311b92",
    "accent-1":    "#b388ff",
    "accent-2":    "#7c4dff",
    "accent-3":    "#651fff",
    "accent-4":    "#6200ea"
  },
  "indigo": {
    "lighten-5":  "#e8eaf6",
    "lighten-4":  "#c5cae9",
    "lighten-3":  "#9fa8da",
    "lighten-2":  "#7986cb",
    "lighten-1":  "#5c6bc0",
    "base":       "#3f51b5",
    "darken-1":   "#3949ab",
    "darken-2":   "#303f9f",
    "darken-3":   "#283593",
    "darken-4":   "#1a237e",
    "accent-1":    "#8c9eff",
    "accent-2":    "#536dfe",
    "accent-3":    "#3d5afe",
    "accent-4":    "#304ffe"
  },
  "blue": {
    "lighten-5":  "#E3F2FD",
    "lighten-4":  "#BBDEFB",
    "lighten-3":  "#90CAF9",
    "lighten-2":  "#64B5F6",
    "lighten-1":  "#42A5F5",
    "base":       "#2196F3",
    "darken-1":   "#1E88E5",
    "darken-2":   "#1976D2",
    "darken-3":   "#1565C0",
    "darken-4":   "#0D47A1",
    "accent-1":    "#82B1FF",
    "accent-2":    "#448AFF",
    "accent-3":    "#2979FF",
    "accent-4":    "#2962FF"
  },
  "light-blue": {
    "lighten-5":  "#e1f5fe",
    "lighten-4":  "#b3e5fc",
    "lighten-3":  "#81d4fa",
    "lighten-2":  "#4fc3f7",
    "lighten-1":  "#29b6f6",
    "base":       "#03a9f4",
    "darken-1":   "#039be5",
    "darken-2":   "#0288d1",
    "darken-3":   "#0277bd",
    "darken-4":   "#01579b",
    "accent-1":    "#80d8ff",
    "accent-2":    "#40c4ff",
    "accent-3":    "#00b0ff",
    "accent-4":    "#0091ea"
  },
  "cyan": {
    "lighten-5":  "#e0f7fa",
    "lighten-4":  "#b2ebf2",
    "lighten-3":  "#80deea",
    "lighten-2":  "#4dd0e1",
    "lighten-1":  "#26c6da",
    "base":       "#00bcd4",
    "darken-1":   "#00acc1",
    "darken-2":   "#0097a7",
    "darken-3":   "#00838f",
    "darken-4":   "#006064",
    "accent-1":    "#84ffff",
    "accent-2":    "#18ffff",
    "accent-3":    "#00e5ff",
    "accent-4":    "#00b8d4"
  },
  "teal": {
    "lighten-5":  "#e0f2f1",
    "lighten-4":  "#b2dfdb",
    "lighten-3":  "#80cbc4",
    "lighten-2":  "#4db6ac",
    "lighten-1":  "#26a69a",
    "base":       "#009688",
    "darken-1":   "#00897b",
    "darken-2":   "#00796b",
    "darken-3":   "#00695c",
    "darken-4":   "#004d40",
    "accent-1":    "#a7ffeb",
    "accent-2":    "#64ffda",
    "accent-3":    "#1de9b6",
    "accent-4":    "#00bfa5"
  },
  "green": {
    "lighten-5":  "#E8F5E9",
    "lighten-4":  "#C8E6C9",
    "lighten-3":  "#A5D6A7",
    "lighten-2":  "#81C784",
    "lighten-1":  "#66BB6A",
    "base":       "#4CAF50",
    "darken-1":   "#43A047",
    "darken-2":   "#388E3C",
    "darken-3":   "#2E7D32",
    "darken-4":   "#1B5E20",
    "accent-1":    "#B9F6CA",
    "accent-2":    "#69F0AE",
    "accent-3":    "#00E676",
    "accent-4":    "#00C853"
  },
  "light-green": {
    "lighten-5":  "#f1f8e9",
    "lighten-4":  "#dcedc8",
    "lighten-3":  "#c5e1a5",
    "lighten-2":  "#aed581",
    "lighten-1":  "#9ccc65",
    "base":       "#8bc34a",
    "darken-1":   "#7cb342",
    "darken-2":   "#689f38",
    "darken-3":   "#558b2f",
    "darken-4":   "#33691e",
    "accent-1":    "#ccff90",
    "accent-2":    "#b2ff59",
    "accent-3":    "#76ff03",
    "accent-4":    "#64dd17"
  },
  "lime": {
    "lighten-5":  "#f9fbe7",
    "lighten-4":  "#f0f4c3",
    "lighten-3":  "#e6ee9c",
    "lighten-2":  "#dce775",
    "lighten-1":  "#d4e157",
    "base":       "#cddc39",
    "darken-1":   "#c0ca33",
    "darken-2":   "#afb42b",
    "darken-3":   "#9e9d24",
    "darken-4":   "#827717",
    "accent-1":    "#f4ff81",
    "accent-2":    "#eeff41",
    "accent-3":    "#c6ff00",
    "accent-4":    "#aeea00"
  },
  "yellow": {
    "lighten-5":  "#fffde7",
    "lighten-4":  "#fff9c4",
    "lighten-3":  "#fff59d",
    "lighten-2":  "#fff176",
    "lighten-1":  "#ffee58",
    "base":       "#ffeb3b",
    "darken-1":   "#fdd835",
    "darken-2":   "#fbc02d",
    "darken-3":   "#f9a825",
    "darken-4":   "#f57f17",
    "accent-1":    "#ffff8d",
    "accent-2":    "#ffff00",
    "accent-3":    "#ffea00",
    "accent-4":    "#ffd600"
  },
  "amber": {
    "lighten-5":  "#fff8e1",
    "lighten-4":  "#ffecb3",
    "lighten-3":  "#ffe082",
    "lighten-2":  "#ffd54f",
    "lighten-1":  "#ffca28",
    "base":       "#ffc107",
    "darken-1":   "#ffb300",
    "darken-2":   "#ffa000",
    "darken-3":   "#ff8f00",
    "darken-4":   "#ff6f00",
    "accent-1":    "#ffe57f",
    "accent-2":    "#ffd740",
    "accent-3":    "#ffc400",
    "accent-4":    "#ffab00"
  },
  "orange": {
    "lighten-5":  "#fff3e0",
    "lighten-4":  "#ffe0b2",
    "lighten-3":  "#ffcc80",
    "lighten-2":  "#ffb74d",
    "lighten-1":  "#ffa726",
    "base":       "#ff9800",
    "darken-1":   "#fb8c00",
    "darken-2":   "#f57c00",
    "darken-3":   "#ef6c00",
    "darken-4":   "#e65100",
    "accent-1":    "#ffd180",
    "accent-2":    "#ffab40",
    "accent-3":    "#ff9100",
    "accent-4":    "#ff6d00"
  },
  "deep-orange": {
    "lighten-5":  "#fbe9e7",
    "lighten-4":  "#ffccbc",
    "lighten-3":  "#ffab91",
    "lighten-2":  "#ff8a65",
    "lighten-1":  "#ff7043",
    "base":       "#ff5722",
    "darken-1":   "#f4511e",
    "darken-2":   "#e64a19",
    "darken-3":   "#d84315",
    "darken-4":   "#bf360c",
    "accent-1":    "#ff9e80",
    "accent-2":    "#ff6e40",
    "accent-3":    "#ff3d00",
    "accent-4":    "#dd2c00"
  },
  "brown": {
    "lighten-5":  "#efebe9",
    "lighten-4":  "#d7ccc8",
    "lighten-3":  "#bcaaa4",
    "lighten-2":  "#a1887f",
    "lighten-1":  "#8d6e63",
    "base":       "#795548",
    "darken-1":   "#6d4c41",
    "darken-2":   "#5d4037",
    "darken-3":   "#4e342e",
    "darken-4":   "#3e2723"
  },
  "blue-grey": {
    "lighten-5":  "#eceff1",
    "lighten-4":  "#cfd8dc",
    "lighten-3":  "#b0bec5",
    "lighten-2":  "#90a4ae",
    "lighten-1":  "#78909c",
    "base":       "#607d8b",
    "darken-1":   "#546e7a",
    "darken-2":   "#455a64",
    "darken-3":   "#37474f",
    "darken-4":   "#263238"
  },
  "grey": {
    "lighten-5":  "#fafafa",
    "lighten-4":  "#f5f5f5",
    "lighten-3":  "#eeeeee",
    "lighten-2":  "#e0e0e0",
    "lighten-1":  "#bdbdbd",
    "base":       "#9e9e9e",
    "darken-1":   "#757575",
    "darken-2":   "#616161",
    "darken-3":   "#424242",
    "darken-4":   "#212121"
  },
  "shades": {
    "black":      "#000000",
    "white":      "#FFFFFF"
  }
};

/*jslint strict: true */

var app = angular.module('materialism', [
  'app.constants',

  'ngRoute',
  'ngAnimate',
  'ngSanitize',
  'ngPlaceholders',
  'ngTable',

  'angular-loading-bar',

  'angulartics',
  'angulartics.google.analytics',

  'nemLogging',
  'uiGmapgoogle-maps',
  'ui.select',

  'gridshore.c3js.chart',
  'monospaced.elastic',     // resizable textarea
  'mgcrea.ngStrap',
  'jcs-autoValidate',
  'ngFileUpload',
  'textAngular',
  'fsm',                    // sticky header
  'smoothScroll',
  'LocalStorageModule'
]);

angular.module('app.constants', [])

.constant('APP', {version:'0.0.1'})

;
// routes
app.config(['$routeProvider', function($routeProvider) {
  $routeProvider.when('/', {
    templateUrl: 'assets/tpl/dashboard.html'
  }).when('/:folder/:tpl', {
      templateUrl: function(attr){
        return 'assets/tpl/' + attr.folder + '/' + attr.tpl + '.html';
      }
    }).when('/:tpl', {
      templateUrl: function(attr){
        return 'assets/tpl/' + attr.tpl + '.html';
      }
    }).otherwise({ redirectTo: '/' });
}])

// google maps
.config(['uiGmapGoogleMapApiProvider', function(uiGmapGoogleMapApiProvider) {
  uiGmapGoogleMapApiProvider.configure({
    //    key: 'your api key',
    v: '3.17',
    libraries: 'weather,geometry,visualization'
  });
}])

// loading bar settings
.config(['cfpLoadingBarProvider', function(cfpLoadingBarProvider) {
  cfpLoadingBarProvider.includeSpinner = false;
  cfpLoadingBarProvider.latencyThreshold = 300;
}])

// defaults for date picker
.config(['$datepickerProvider', function($datepickerProvider) {
  angular.extend($datepickerProvider.defaults, {
    dateFormat: 'dd/MM/yyyy',
    iconLeft: 'md md-chevron-left',
    iconRight: 'md md-chevron-right',
    autoclose: true,
  });
}])

// defaults for date picker
.config(['$timepickerProvider', function($timepickerProvider) {
  angular.extend($timepickerProvider.defaults, {
    timeFormat: 'HH:mm',
    iconUp: 'md md-expand-less',
    iconDown: 'md md-expand-more',
    hourStep: 1,
    minuteStep: 1,
    arrowBehavior: 'picker',
    modelTimeFormat: 'HH:mm'
  });
}])

// disable nganimate with adding class
.config(['$animateProvider', function($animateProvider) {
  $animateProvider.classNameFilter(/^(?:(?!ng-animate-disabled).)*$/);
}])

// set constants
.run(['$rootScope', 'APP', function ($rootScope, APP) {
  $rootScope.APP = APP;
}]);

/**
 * Description:
 *     removes white space from text. useful for html values that cannot have spaces
 * Usage:
 *   {{some_text | nospace}}
 */
app.filter('nospace', function () {
  return function (value) {
    return (!value) ? '' : value.replace(/ /g, '');
  };
});

app.run(['$rootScope', '$analytics', function ($rootScope, $analytics) {
  $rootScope.$on('theme:change', function(event, msg) {
    $analytics.eventTrack(msg, {  category: 'Themepicker' });
  });
}]);

app.directive('formControl', function() {
  return {
    restrict: 'C',
    link: function(scope, element, attrs) {

      // Add class filled to form-control's that have a value
      if(element.val()){
        element.parent().addClass('filled');
      }

      element.bind('blur', function (e) {
        input = angular.element(e.currentTarget);
        if(input.val()){
          input.parent().addClass('filled');
        } else {
          input.parent().removeClass('filled');
        }
        input.parent().removeClass('active');
      }).bind('focus', function (e) {
        input = angular.element(e.currentTarget);
        input.parent().addClass('active');
      });

    }
  };
});

app.directive('navbarScroll', function($window) {
  return {
    restrict: 'A',
    link: function(scope, element, attr) {
      var navbar = angular.element('.main-container .navbar');
      angular.element($window).bind('scroll', function() {
        if (this.pageYOffset > 0) {
          navbar.addClass('scroll');
        } else {
          navbar.removeClass('scroll');
        }
      });
    }
  };
});
app.directive('navbarSearch', ['$timeout', function($timeout) {
  return {
    restrict: 'A',
    templateUrl: 'assets/tpl/directives/navbar-search.html',
    link: function(scope, element, attrs) {
      scope.showNavbarSearch = false;

      scope.toggleSearch = function(){
        scope.showNavbarSearch = !scope.showNavbarSearch;
      };

      scope.submitNavbarSearch = function(){
        scope.showNavbarSearch = false;
      };
    }
  };
}]);

app.directive('navbarToggle', function() {
  return {
    restrict: 'C',
    link: function(scope, element, attrs) {
      element.sideNav({ menuWidth: 260, closeOnClick: true });
    }
  };
});

app.directive('nouiSlider', function() {

  return {
    restrict: 'A',
    link: function(scope, element, attrs) {

      var bind = angular.element(attrs.bind);
      var bindRange = angular.element(attrs.bindRange);
      var indicator = angular.element(attrs.indicator);

      if ( bind.length ) start = bind.val();

      // setting range or start
      start = ( attrs.start ? attrs.start : 0 );
      range = ( attrs.range ? attrs.range : 0 );

      if(range){
        startPoint = [start, range];
        element.addClass('noUi-range');
      } else {
        startPoint = [start];
      }

      // settings
      step = ( attrs.step ? parseInt(attrs.step) : 0 );
      min = ( attrs.min ? parseInt(attrs.min) : 0 );
      max = ( attrs.max ? parseInt(attrs.max) : 10 );

      $(element).noUiSlider({
        start: startPoint,
        step: step,
        range: {
          'min': [ min ],
          'max': [ max ]
        }
      });

      if ( indicator.selector === 'true' ) {
        $(element).on('slide set change', function(a,b){
          if( !$(this).find('.noUi-handle div').length ){
            $(this).find('.noUi-handle').append('<div>'+b+'</div>');
          }
          $(this).find('.noUi-handle div').html(b);
        });
      }

      $(element).on('slide', function(a,b){

        if ( bindRange.length ) {
          v = parseInt(b[0]);
          v2 = parseInt(b[1]);
        } else {
          v = parseInt(b);
        }

        if ( bind.length ) {
          if (bind[0].value !== undefined) {
            bind.val(v);
          } else {
            bind.html(v);
          }
        }

        if ( bindRange.length ) {
          if (bindRange[0].value !== undefined) {
            bindRange.val(v2);
          } else {
            bindRange.html(v2);
          }
        }
      });
    }
  };

});

app.directive('todoWidget', ['todoService', function(todoService) {
  return {
    restrict: 'EA',
    templateUrl: 'assets/tpl/directives/todo-widget.html',
    replace: true,
    link: function($scope, $element) {
      $scope.todoService = new todoService($scope);
    }
  };
}]);

app.directive('menuLink', function() {
  return {
    restrict: 'A',
    transclude: true,
    replace: true,
    scope: {
      href: '@',
      icon: '@',
      name: '@'
    },
    templateUrl: 'assets/tpl/directives/menu-link.html',
    controller: ['$element', '$location', '$rootScope', function($element, $location, $rootScope) {
      this.getName = function(name) {
        if ( name !== undefined ) {
          return name;
        } else {
          return $element.find('a').text().trim();
        }
      };

      this.setBreadcrumb = function(name) {
        $rootScope.pageTitle = this.getName(name);
      };

      this.isSelected = function(href) {
        return $location.path() == href.slice(1, href.length);
      };
    }],
    link: function(scope, element, attrs, linkCtrl) {
      icon = attrs.icon;
      if ( icon ) {
        element.children().first().prepend('<i class="' + icon + '"></i>&nbsp;');
      }

      if ( linkCtrl.isSelected(attrs.href) ) {
        linkCtrl.setBreadcrumb(attrs.name);
      }

      element.click(function(){
        linkCtrl.setBreadcrumb(attrs.name);
      });

      element.find('a').ripples();

      scope.isSelected = function() {
        return linkCtrl.isSelected(attrs.href);
      };
    }
  };
});

app.directive('menuToggle', ['$location', function($location) {
  return {
    restrict: 'A',
    transclude: true,
    replace: true,
    scope: {
      name: '@',
      icon: '@'
    },
    templateUrl: 'assets/tpl/directives/menu-toggle.html',
    link: function(scope, element, attrs) {
      icon = attrs.icon;
      if ( icon ) {
        element.children().first().prepend('<i class="' + icon + '"></i>&nbsp;');
      }

      element.children().first().on('click', function(e) {
        e.preventDefault();
        link = angular.element(e.currentTarget);

        if( link.hasClass('active') ) {
          link.removeClass('active');
        } else {
          link.addClass('active');
        }
      });

      element.find('a').ripples();

      scope.isOpen = function() {
        folder = '/' + $location.path().split('/')[1];
        return folder == attrs.path;
      };
    }
  };
}]);

app.directive('vectormap', ['colorService', function(colorService) {

  return {
    restrict: 'E',
    'markers': '=markers',
    link: function(scope, element, attrs) {
      var chart = null;
      var markers = scope.markers;

      scope.$watch('datamap', function(n,o){
        if (!chart){
          $(element).width('auto');
          $(element).height('100%');

          options = {
            backgroundColor: 'transparent',
            series: {
              regions: [{
                values: scope.datamap,
                scale: [colorService.theme('darken-2'), colorService.theme('lighten-2')],
                attribute:'fill'
              }],
            },
            regionStyle: {
              initial: {
                fill: colorService.theme()
              }
            },
            markerStyle: {
              initial: {
                stroke: colorService.theme_secondary('lighten-1'),
                fill: colorService.theme_secondary('darken-1')
              },
              hover: {
                stroke: colorService.theme_secondary('lighten-3')
              }
            }
          };

          if (markers !== null) {
            options.markers = markers;
          }

          chart = $(element).vectorMap(options);
        } else {
          chart.vectorMap('get', 'mapObject').series.regions[0].setValues(scope.datamap);
          chart.vectorMap('get', 'mapObject').series.regions[0].setNormalizeFunction('polynomial');
          chart.vectorMap('get', 'mapObject').series.regions[0].setScale([colorService.theme('darken-2'), colorService.theme('lighten-2')]);
        }
      });
    }
  };

}]);

app.directive('autofocus', ['$timeout', function ($timeout) {
  return {
    restrict: 'A',
    link: function ($scope, $element) {
      $timeout(function () {
        $element[0].focus();
      });
    }
  };
}]);

app.directive('cardFlip', function() {
  return {
    restrict: 'C',
    link: function(scope, element, attrs) {
      element.find('.btn-flip, .card-image').on('click', function(){
        element.find('.card-reveal').toggleClass('active');
      });
    }
  };
});

app.directive('scrollSpy', ['$window',function($window) {
  return {
    link: function(scope, element, attrs) {
      angular.element($window).bind('scroll', function() {
        scope.scroll = this.pageYOffset;
        if(!scope.$$phase) {
          scope.$apply();
        }
      });
    }
  };
}]);

app.directive('initRipples', function() {
  return {
    restrict: 'A',
    link: function(scope, element, attrs) {
      var withRipples = [
        '.btn:not(.withoutripple)',
        '.card-image',
        '.navbar a:not(.withoutripple)',
        '.dropdown-menu a',
        '.nav-tabs a:not(.withoutripple)',
        '.withripple'
      ].join(',');

      $(element).find(withRipples).ripples();
    }
  };
});

app.factory('colorService', function() {

  function brand_primary(variation) {
    return get_color(get_color_name('brand-primary'), variation);
  }
  function brand_success(variation) {
    return get_color(get_color_name('brand-success'), variation);
  }
  function brand_info(variation) {
    return get_color(get_color_name('brand-info'), variation);
  }
  function brand_warning(variation) {
    return get_color(get_color_name('brand-warning'), variation);
  }
  function brand_danger(variation) {
    return get_color(get_color_name('brand-danger'), variation);
  }

  function theme(variation) {
    variation = ( variation ? variation : 'base' );
    return get_color(get_color_name('theme'), variation);
  }
  function theme_secondary(variation) {
    variation = ( variation ? variation : 'base' );
    return get_color(get_color_name('theme-secondary'));
  }

  function get_color_name(name) {
    if(theme_colors[name] !== undefined){
      return theme_colors[name];
    }

    return global_colors[name];
  }

  function get_color(color, variation) {
    variation = ( variation ? variation : 'base' );

    return global_colors[color][variation];
  }

  function get_colors(){

  }

  return {
    brand_primary: brand_primary,
    brand_success: brand_success,
    brand_info: brand_info,
    brand_warning: brand_warning,
    brand_danger: brand_danger,
    theme: theme,
    theme_secondary: theme_secondary,
    get_color: get_color
  };
});

app.factory('todoService', ['localStorageService', '$rootScope', '$filter', function (localStorageService, $rootScope, $filter) {
  function Todo ($scope) {
    this.$scope = $scope;
    this.todoFilter = {};
    this.activeFilter = 0;

    this.input = angular.element('#todo-title');

    this.filters = [
      {
        'title': 'All',
        'method': 'all'
      },
      {
        'title': 'Active',
        'method': 'active'
      },
      {
        'title': 'Completed',
        'method': 'completed'
      }
    ];

    this.newTodo = {
      title: '',
      done: false,
      editing: false
    };

    this.restore();

    if ( !localStorageService.get('todos') ) {
      todos = [];
      todos[0] = { title: 'Grow my mailing list', done: true };
      todos[1] = { title: 'Create a killer SAAS business', done: false };
      todos[2] = { title: 'Write autoresponder sequence', done: false };

      localStorageService.set('todos', todos);
    }
    localStorageService.bind(this.$scope, 'todos');

    this.completedTodos = function() {
      return $filter('filter')(this.$scope.todos, { done: !true });
    };

    this.addTodo = function() {
      if (this.todo.title !== '' && this.todo.title !== undefined) {
        this.$scope.todos.push(this.todo);
        $rootScope.$broadcast('todos:count', this.count());
        this.restore();
      }
    };

    this.updateTodo = function() {
      this.restore();
    };
  }

  Todo.prototype.saveTodo = function(todo) {
    if ( this.todo.editing ) {
      this.updateTodo();
    } else {
      this.addTodo();
    }
  };

  Todo.prototype.editTodo = function(todo) {
    this.todo = todo;
    this.todo.editing = true;
    this.input.focus();
  };

  Todo.prototype.toggleDone = function(todo) {
    $rootScope.$broadcast('todos:count', this.count());
  };

  Todo.prototype.clearCompleted = function() {
    this.$scope.todos = this.completedTodos();
    this.restore();
  };

  Todo.prototype.count = function() {
    c = this.completedTodos();
    return c.length;
  };

  Todo.prototype.restore = function(focus) {
    focus = typeof focus !== 'undefined' ? focus : true;

    this.todo = angular.copy(this.newTodo);
    this.input.val('');

    if ( focus === true )
      this.input.focus();
  };

  Todo.prototype.filter = function(filter) {
    if ( filter === 'active' ) {
      this.activeFilter = 1;
      this.todoFilter = { done: false };
    } else if ( filter === 'completed' ) {
      this.activeFilter = 2;
      this.todoFilter = { done: true };
    } else {
      this.activeFilter = 0;
      this.todoFilter = {};
    }
  };

  return Todo;
}]);

app.controller('MainController',
  ['$scope', '$animate', 'localStorageService', 'todoService', '$alert', '$timeout', '$rootScope',
  function($scope, $animate, localStorageService, todoService, $alert, $timeout, $rootScope){

  $scope.theme_colors = [
    'pink','red','purple','indigo','blue',
    'light-blue','cyan','teal','green','light-green',
    'lime','yellow','amber','orange','deep-orange'
  ];

  // Add todoService to scope
  service = new todoService($scope);
  $scope.todosCount = service.count();
  $scope.$on('todos:count', function(event, count) {
    $scope.todosCount = count;
    element = angular.element('#todosCount');

    if ( !element.hasClass('animated') ){
      $animate.addClass(element, 'animated bounce', function() {
        $animate.removeClass(element, 'animated bounce');
      });
    }
  });

  $scope.fillinContent = function(){
    $scope.htmlContent = 'content content';
  };

  // theme changing
  $scope.changeColorTheme = function(cls){
    $rootScope.$broadcast('theme:change', 'Choose template');//@grep dev
    $scope.theme.color = cls;
  };

  $scope.changeTemplateTheme = function(cls){
    $rootScope.$broadcast('theme:change', 'Choose color');//@grep dev
    $scope.theme.template = cls;
  };

  if ( !localStorageService.get('theme') ) {
    theme = {
      color: 'theme-pink',
      template: 'theme-template-dark'
    };
    localStorageService.set('theme', theme);
  }
  localStorageService.bind($scope, 'theme');

  var introductionAlert = $alert({
    title: 'Welcome to Materialism',
    content: 'Stay a while and listen',
    placement: 'top-right',
    type: 'theme',
    container: '.alert-container-top-right',
    show: false,
    templateUrl: 'assets/tpl/partials/alert-introduction.html',
    animation: 'mat-grow-top-right'
  });

  if(!localStorageService.get('alert-introduction')) {
    $timeout(function(){
      $scope.showIntroduction();
      localStorageService.set('alert-introduction', 1);
    }, 2500);
  }

  $scope.showIntroduction = function(){
    introductionAlert.show();
  };


  var refererNotThemeforest = $alert({
    title: 'Hi there!',
    content: 'You like what you see and interested in using our theme? You can find it at <a href="http://themeforest.net/item/materialism-angular-bootstrap-admin-template/11322821" target="_blank"><img style="height:20px;" src="assets/img/icons/themeforest-icon.png" /> Themeforest</a>.',
    placement: 'top-right',
    type: 'theme',
    container: '.alert-container-top-right',
    show: false,
    animation: 'mat-grow-top-right'
  });

  if (document.referrer === '' || document.referrer.indexOf('themeforest.net') !== 0){
    $timeout(function(){
      refererNotThemeforest.show();
    }, 1750);
  }
}]);

app.controller('DashboardController',
  ['$window', '$scope', '$rootScope', '$interval', 'colorService',
  function($window, $scope, $rootScope, $interval, colorService){

  $rootScope.pageTitle = 'Dashboard';

  pattern = [];
  pattern.push(colorService.theme());

  $scope.color_pattern = pattern.join();

  random_load_value = function(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };

  var values = [];
  for ( i=0; i<30; ++i ){
    values.push(random_load_value(40, 80));
  }

  randomData = function(size, min, max){
    data = [];
    for ( i=0; i<size; ++i ){
      if(data.length){
        factor = 3;
        minOrganic = data[data.length-1]-factor;
        maxOrganic = data[data.length-1]+factor;
        data.push(
          random_load_value(
            minOrganic<min?min:minOrganic,
            maxOrganic>max?max:maxOrganic
          )
        );
      } else {
        data.push(random_load_value(min, max));
      }
    }
    return data;
  };

  $scope.randomDate = function(){
    start = new Date(2012, 0, 1);
    end = new Date();

    date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
    dateString = date.toLocaleString();
    return dateString;
  };

  $scope.chartData1 = randomData(20, 40, 60);
  $scope.chartData2 = randomData(20, 40, 60);
  $scope.chartData3 = randomData(20, 40, 60);
  $scope.chartData4 = randomData(100, 10, 30);

  // set initial server load
  $scope.serverLoad = values[values.length-1]+'%';

  server_load_options = {
    bindto: '#server-load-chart',
    legend: { show: false },
    padding: {
        top: 6,
        right: -1,
        bottom: -8,
        left: 0
    },
    data: {
      columns: [
        ['Server load'].concat(values),
      ],
      type: 'area'
    },
    size: {
      height: 160
    },
    axis: {
      x: {
        show: false,
        padding: {
          left: 0,
          right: 0
        }
      },
      y: {
        show: false,
        max: 100,
        min: 0,
        padding: {
          top: 0,
          bottom: 0
        }
      }
    },
    grid: {
      focus: { show: false }
    },
    point: { show: false },
    tooltip: {
      format: {
        title: function (d) { return undefined; }, // Disable tooltip header
        value: function (value, ratio, id) {
          return value + '%';
        }
      }
    },
    transition: { duration: 50 },
    color: { pattern: pattern.reverse() }
  };

  var server_load_chart = c3.generate(server_load_options);
  var interval;

  createInterval = function() {
    if(interval) return;

    return $interval(function(){
      v = random_load_value(40, 80);
      $scope.serverLoad = v+'%';
      server_load_chart.flow({
        columns: [['Server load', v]]
      });
    }, 2500);
  };

  cleanInterval = function() {
    if (angular.isDefined(interval)) {
      $interval.cancel(interval);
      interval = false;
    }
  };

  interval = createInterval();
  var window = angular.element($window);
  var prevEvent;

  window.on('blur', function(event) {
    if (prevEvent !== 'blur')
      cleanInterval();
    prevEvent = 'blur';
  });

  window.on('focus', function(event) {
    if (prevEvent !== 'focus')
      interval = createInterval();
    prevEvent = 'focus';
  });

  $scope.$on('$destroy', function() {
    cleanInterval();
  });

  $scope.tabs = ['Log','Timeline','Messages'];

}]);

app.controller('ChartsController', ['$scope', '$interval', 'colorService', function($scope, $interval, colorService){

  pattern = [];
  pattern.push(colorService.brand_success());
  pattern.push(colorService.brand_primary());
  pattern.push(colorService.brand_info());
  pattern.push(colorService.brand_warning());
  pattern.push(colorService.brand_danger());

  $scope.color_pattern = pattern.join();

  guage_options = {
    data: {
      columns: [
        ['data', 50]
      ],
      type: 'gauge'
    },
    transition: {
      duration: 500
    },
    color: {
      pattern: pattern.reverse(),
      threshold: {
        values: [20, 50, 70, 100, 110]
      }
    }
  };

  var load_options = jQuery.extend({}, guage_options);
  var cpu_options = jQuery.extend({}, guage_options);
  var mem_options = jQuery.extend({}, guage_options);

  load_options.bindto = '#load-chart';
  cpu_options.bindto = '#cpu-chart';
  mem_options.bindto = '#mem-chart';

  var load_chart = c3.generate(load_options);
  var cpu_chart = c3.generate(cpu_options);
  var mem_chart = c3.generate(mem_options);

  interval = $interval(function(){
    load_chart.load({
      columns: [['data', Math.floor((Math.random() * 100) + 1)]]
    });
    cpu_chart.load({
      columns: [['data', Math.floor((Math.random() * 100) + 1)]]
    });
    mem_chart.load({
      columns: [['data', Math.floor((Math.random() * 100) + 1)]]
    });
  }, 2000);

  $scope.$on('$destroy', function() {
    if (angular.isDefined(interval)) {
      $interval.cancel(interval);
      interval = undefined;
    }
  });

}]);

app.controller('ColorsController', ['$scope', function($scope){

  angular.forEach(angular.element(".dynamic-color .col-md-4 div"), function(element){

    var elem = angular.element(element);
    var cls = elem.attr('class');

    var piece = cls.split(' ');

    if(piece[1] === undefined){
      piece[1] = 'base';
    }

    elem.html(piece[0]);
    elem.append('<div class="pull-right">'+piece[1]+'</div>');

    if(piece[1] == "darken-4"){
      elem.after('<br/>');
    }
  });

}]);
app.controller('ButtonsController', ['$scope', function($scope){

  $scope.colorPalette = [
    'pink','red','purple','indigo','blue',
    'light-blue','cyan','teal','green','light-green',
    'lime','yellow','amber','orange','deep-orange'
  ];

  $scope.colorsVariants = [
    "lighten-5","lighten-4","lighten-3","lighten-2","lighten-1",
    "base",
    "darken-1","darken-2","darken-3","darken-4",
    "accent-1","accent-2","accent-3","accent-4"
  ];

  $scope.buttons = [
    'btn-default','btn-primary','btn-success','btn-info','btn-warning','btn-danger'
  ];

  $scope.buttonTypes = [
    '','btn-flat','btn-round','btn-round btn-flat','btn-border'
  ];

  $scope.buttonSizes = [
    'btn-lg','btn','btn-sm', 'btn-xs'
  ];

}]);


app.controller('ListsController', ['$scope', '$routeParams', '$http', function($scope, $routeParams, $http){
  $('#range').on('slide set', function(a,b){
    if(!$(this).find('.noUi-handle div').length){
      $(this).find('.noUi-handle').append('<div>'+b+'</div>');
    }
    $(this).find('.noUi-handle div').html(b);
  });
}]);

app.controller('FullMapController', ['$scope', '$rootScope', 'uiGmapIsReady', function($scope, $rootScope, uiGmapIsReady) {
  $scope.map = { center: { latitude: 45, longitude: -73 }, zoom: 8, control: {} };

  $rootScope.isFullPageMap = true;

  $scope.$on('$destroy', function() {
    $rootScope.isFullPageMap = false;
  });

  // This is so the map repaints after revisiting the page
  // Or else it would not display fully
  uiGmapIsReady.promise(1).then(function(instances) {
    instances.forEach(function(inst) {
      $scope.map.control.refresh();
    });
  });
}]);

app.controller('BasicMapController', ['$scope', function($scope) {
  $scope.map = { center: { latitude: 45, longitude: -73 }, zoom: 8 };
}]);

app.controller('ClickableMapController', ['$scope', function($scope) {
  $scope.map = { center: { latitude: 40.399516, longitude: -22.703348 }, zoom: 2 };

  $scope.centerOn = function(lat, lng){
    $scope.map.center = { latitude: lat, longitude: lng };
  };

  var markers = [];

  markers.push({
    id: 0,
    latitude: 52.369371,
    longitude: 4.894494,
    title: 'Amsterdam'
  });
  markers.push({
    id: 1,
    latitude: 40.712942,
    longitude: -74.005774,
    title: 'New York'
  });
  markers.push({
    id: 2,
    latitude: 41.385196,
    longitude: 2.173315,
    title: 'Barcelona'
  });
  markers.push({
    id: 3,
    latitude: 37.764355,
    longitude: -122.451954,
    title: 'San Francisco'
  });



  $scope.markers = markers;
}]);

app.controller('SearchableMapController', ['$scope', 'uiGmapGoogleMapApi', function($scope, uiGmapGoogleMapApi) {
  $scope.map = {
    center: {
      latitude: 40.399516,
      longitude: -22.703348
    },
    control: {},
    zoom: 2
  };

  uiGmapGoogleMapApi.then(function(maps) {
    $scope.searchFor = function(query) {
      geocoder = new maps.Geocoder();
      geocoder.geocode( { address: query }, function(results, status) {
        if (status == maps.GeocoderStatus.OK) {
          var latlng = results[0].geometry.location;
          $scope.map.control.refresh({latitude: latlng.lat(), longitude: latlng.lng()});
          $scope.map.control.getGMap().setZoom(6);
        }
      });
    };
  });
}]);

app.controller('ZoomableMapController', ['$scope', function($scope) {
  $scope.zoomed_from_slider = false;
  $scope.map = {
    center: {
      latitude: 52.369371,
      longitude: 4.894494
    },
    control: {},
    events: {
      zoom_changed: function(maps, eventName, args) {
        if ($scope.zoomed_from_slider === false) {
          zoom = $scope.getMapInstance().getZoom();
          $('#slider').val(zoom);
        } else {
          $scope.zoomed_from_slider = false;
        }
      }
    },
    zoom: 6
  };

  $('#slider').on({
    slide: function(a,b){
      $scope.zoomed_from_slider = true;
      $scope.getMapInstance().setZoom(parseInt(b));
    }
  });

  $scope.getMapInstance = function () {
    return $scope.map.control.getGMap();
  };
}]);

app.controller('VectorMapController', ['$scope','$interval', function($scope, $interval) {
  $scope.datamap = { 'US': 3, 'IT': 80, 'FR': 10, 'BR': 5, 'ES': 2 };

  $scope.markers = [
    { latLng: [52.369371, 4.894494], name: 'Amsterdam' },
    { latLng: [40.712942, -74.005774], name: 'New York' },
    { latLng: [41.385196, 2.173315], name: 'Barcelona' },
    { latLng: [37.764355, -122.451954], name: 'San Francisco' },
    {latLng: [41.90, 12.45], name: 'Vatican City'},
    {latLng: [43.73, 7.41], name: 'Monaco'},
    {latLng: [-0.52, 166.93], name: 'Nauru'},
    {latLng: [-8.51, 179.21], name: 'Tuvalu'},
    {latLng: [43.93, 12.46], name: 'San Marino'},
    {latLng: [47.14, 9.52], name: 'Liechtenstein'},
    {latLng: [7.11, 171.06], name: 'Marshall Islands'},
    {latLng: [17.3, -62.73], name: 'Saint Kitts and Nevis'},
    {latLng: [3.2, 73.22], name: 'Maldives'},
    {latLng: [35.88, 14.5], name: 'Malta'},
    {latLng: [12.05, -61.75], name: 'Grenada'},
    {latLng: [13.16, -61.23], name: 'Saint Vincent and the Grenadines'},
    {latLng: [13.16, -59.55], name: 'Barbados'},
    {latLng: [17.11, -61.85], name: 'Antigua and Barbuda'},
    {latLng: [-4.61, 55.45], name: 'Seychelles'},
    {latLng: [7.35, 134.46], name: 'Palau'},
    {latLng: [42.5, 1.51], name: 'Andorra'},
    {latLng: [14.01, -60.98], name: 'Saint Lucia'},
    {latLng: [6.91, 158.18], name: 'Federated States of Micronesia'},
    {latLng: [1.3, 103.8], name: 'Singapore'},
    {latLng: [1.46, 173.03], name: 'Kiribati'},
    {latLng: [-21.13, -175.2], name: 'Tonga'},
    {latLng: [15.3, -61.38], name: 'Dominica'},
    {latLng: [-20.2, 57.5], name: 'Mauritius'},
    {latLng: [26.02, 50.55], name: 'Bahrain'},
    {latLng: [0.33, 6.73], name: 'São Tomé and Príncipe'}
  ];





}]);



app.controller('FormsController', ['$scope', 'bootstrap3ElementModifier', function($scope, bootstrap3ElementModifier){

  bootstrap3ElementModifier.enableValidationStateIcons(false);

  $scope.person = {};
  $scope.people = [
    { name: 'Adam',      email: 'adam@email.com',      age: 12, country: 'United States' },
    { name: 'Amalie',    email: 'amalie@email.com',    age: 12, country: 'Argentina' },
    { name: 'Estefanía', email: 'estefania@email.com', age: 21, country: 'Argentina' },
    { name: 'Adrian',    email: 'adrian@email.com',    age: 21, country: 'Ecuador' },
    { name: 'Wladimir',  email: 'wladimir@email.com',  age: 30, country: 'Ecuador' },
    { name: 'Samantha',  email: 'samantha@email.com',  age: 30, country: 'United States' },
    { name: 'Nicole',    email: 'nicole@email.com',    age: 43, country: 'Colombia' },
    { name: 'Natasha',   email: 'natasha@email.com',   age: 54, country: 'Ecuador' },
    { name: 'Michael',   email: 'michael@email.com',   age: 15, country: 'Colombia' },
    { name: 'Nicolás',   email: 'nicolas@email.com',    age: 43, country: 'Colombia' }
  ];

  $scope.availableColors = ['Red','Green','Blue','Yellow','Magenta','Maroon','Umbra','Turquoise'];

  $scope.selectedState = '';
  $scope.states = ["Alabama","Alaska","Arizona","Arkansas","California","Colorado","Connecticut","Delaware","Florida","Georgia","Hawaii","Idaho","Illinois","Indiana","Iowa","Kansas","Kentucky","Louisiana","Maine","Maryland","Massachusetts","Michigan","Minnesota","Mississippi","Missouri","Montana","Nebraska","Nevada","New Hampshire","New Jersey","New Mexico","New York","North Dakota","North Carolina","Ohio","Oklahoma","Oregon","Pennsylvania","Rhode Island","South Carolina","South Dakota","Tennessee","Texas","Utah","Vermont","Virginia","Washington","West Virginia","Wisconsin","Wyoming"];

  $scope.sharedDate = '01/01/2016';
  $scope.sharedTime = "1970-01-01T09:30:40.000Z";



}]);



app.controller('UploadController', ['$scope', 'Upload', '$timeout', function ($scope, Upload, $timeout) {

  $scope.fileReaderSupported = window.FileReader !== undefined && (window.FileAPI === undefined || FileAPI.html5 !== false);

  $scope.$watch('files', function () {
    $scope.upload($scope.files);
  });

  progressHandler = function(evt) {
    var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
    console.log('progress: ' + progressPercentage + '% ' + evt.config.file.name);
  };

  successHandler = function(data, status, headers, config) {
    console.log('file ' + config.file.name + 'uploaded. Response: ' + JSON.stringify(data));
  };

  thumbHandler = function(file) {
    generateThumb(file);
  };

  generateThumb = function(file) {
    if (file !== undefined) {
      if ($scope.fileReaderSupported && file.type.indexOf('image') > -1) {
        $timeout(function() {
          var fileReader = new FileReader();
          fileReader.readAsDataURL(file);
          fileReader.onload = function(e) {
            $timeout(function() {
              file.dataUrl = e.target.result;
            });
          };
        });
      }
    }
  };

  $scope.upload = function (files) {
    if (files && files.length) {
      for (var i = 0; i < files.length; i++) {
        var file = files[i];
        Upload.upload({
          url: '#',
          file: file
        })
        .progress(progressHandler)
        .success(successHandler);
      }
    }
  };

  $scope.$watch('files', function(files) {
    $scope.formUpload = false;
    if (files !== undefined && files !== null) {
      for (var i = 0; i < files.length; i++) {
        $scope.errorMsg = undefined;
        (thumbHandler)(files[i]);
      }
    }
  });

}]);

app.controller('TablesBasicController', ['$scope', 'PlaceholderTextService', function($scope, PlaceholderTextService){

  // settings
  $scope.settings = {
    singular: 'Item',
    plural: 'Items',
    cmd: 'Add'
  };

  // adding demo data
  var data = [];
  for (var i = 1; i <= 10; i++){
    data.push({
      icon: PlaceholderTextService.createIcon(true),
      firstname: PlaceholderTextService.createFirstname(),
      lastname: PlaceholderTextService.createLastname(),
      name: PlaceholderTextService.createName(),
      paragraph: PlaceholderTextService.createSentence()
    });
  }
  $scope.data = data;

  // methods
  $scope.checkAll = function () {
    angular.forEach($scope.data, function (item) {
      item.selected = !item.selected;
    });
  };

}]);

app.controller('TablesDataController', ['$scope', 'PlaceholderTextService', 'ngTableParams', '$filter', function($scope, PlaceholderTextService, ngTableParams, $filter){

  // adding demo data
  var data = [];
  for (var i = 1; i <= 50; i++){
    data.push({
      icon: PlaceholderTextService.createIcon(),
      firstname: PlaceholderTextService.createFirstname(),
      lastname: PlaceholderTextService.createLastname(),
      paragraph: PlaceholderTextService.createSentence()
    });
  }
  $scope.data = data;

  $scope.tableParams = new ngTableParams({
    page: 1,            // show first page
    count: 10,
    sorting: {
      firstname: 'asc'     // initial sorting
    }
  }, {
    filterDelay: 50,
    total: data.length, // length of data
    getData: function($defer, params) {
      var searchStr = params.filter().search;
      var mydata = [];

      if(searchStr){
        searchStr = searchStr.toLowerCase();
        mydata = data.filter(function(item){
          return item.firstname.toLowerCase().indexOf(searchStr) > -1 || item.lastname.toLowerCase().indexOf(searchStr) > -1;
        });

      } else {
        mydata = data;
      }

      mydata = params.sorting() ? $filter('orderBy')(mydata, params.orderBy()) : mydata;
      $defer.resolve(mydata.slice((params.page() - 1) * params.count(), params.page() * params.count()));
    }
  });


}]);

app.controller('CrudController', ['$scope', '$window', '$aside', 'PlaceholderTextService', function($scope, $window, $aside, PlaceholderTextService){

  // settings
  $scope.settings = {
    singular: 'Item',
    plural: 'Items',
    cmd: 'Add'
  };

  // adding demo data
  var data = [];
  for (var i = 1; i <= 90; i++){
    data.push({
      icon: PlaceholderTextService.createIcon(true),
      firstname: PlaceholderTextService.createFirstname(),
      lastname: PlaceholderTextService.createLastname(),
      paragraph: PlaceholderTextService.createSentence()
    });
  }
  $scope.data = data;

  // defining template
  var formTpl = $aside({
    scope: $scope,
    templateUrl: 'assets/tpl/apps/crud-form.html',
    show: false,
    placement: 'left',
    backdrop: false,
    animation: 'am-slide-left'
  });

  // methods
  $scope.checkAll = function () {
    angular.forEach($scope.data, function (item) {
      item.selected = !item.selected;
    });
  };

  $scope.editItem = function(item){
    if(item){
      item.editing = true;
      $scope.item = item;
      $scope.settings.cmd = 'Edit';
      showForm();
    }
  };

  $scope.viewItem = function(item){
    if(item){
      item.editing = false;
      $scope.item = item;
      $scope.settings.cmd = 'View';
      showForm();
    }
  };

  $scope.createItem = function(){
    var item = {
      icon: PlaceholderTextService.createIcon(true),
      editing: true
    };
    $scope.item = item;
    $scope.settings.cmd = 'New';
    showForm();
  };

  $scope.saveItem = function(){
    if($scope.settings.cmd == 'New'){
      $scope.data.push($scope.item);
    }
    hideForm();
  };

  $scope.remove = function(item){
    if(confirm('Are you sure?')){
      if(item){
        $scope.data.splice($scope.data.indexOf(item), 1);
      } else {
        $scope.data = $scope.data.filter(
          function(item) {
            return !item.selected;
          }
        );
        $scope.selectAll = false;
      }
    }
  };

  showForm = function(){
    angular.element('.tooltip').remove();
    formTpl.show();
  };

  hideForm = function(){
    formTpl.hide();
  };

  $scope.$on('$destroy', function() {
    hideForm();
  });

}]);

app.controller('TodoController', ['$scope', 'todoService', function($scope, todoService){
  $scope.todoService = new todoService($scope);
}]);
